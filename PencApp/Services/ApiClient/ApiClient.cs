//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace PencApp.Services.ApiClient
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IApiClient
    {
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TournamentDTO> TournamentsGetAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TournamentDTO> TournamentsGetAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TournamentDTO> TournamentsPutAsync(long id, TournamentDTO body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TournamentDTO> TournamentsPutAsync(long id, TournamentDTO body, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TournamentsDeleteAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TournamentsDeleteAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TournamentDTO> TournamentsPatchAsync(long id, TournamentDTO body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TournamentDTO> TournamentsPatchAsync(long id, TournamentDTO body, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TeamDTO> TeamsGetAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TeamDTO> TeamsGetAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TeamDTO> TeamsPutAsync(long id, TeamDTO body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TeamDTO> TeamsPutAsync(long id, TeamDTO body, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TeamsDeleteAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TeamsDeleteAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TeamDTO> TeamsPatchAsync(long id, TeamDTO body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TeamDTO> TeamsPatchAsync(long id, TeamDTO body, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PredictionDTO> PredictionsGetAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PredictionDTO> PredictionsGetAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PredictionDTO> PredictionsPutAsync(long id, PredictionDTO body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PredictionDTO> PredictionsPutAsync(long id, PredictionDTO body, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PredictionsDeleteAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PredictionsDeleteAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PredictionDTO> PredictionsPatchAsync(long id, PredictionDTO body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PredictionDTO> PredictionsPatchAsync(long id, PredictionDTO body, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PencaDTO> PencasGetAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PencaDTO> PencasGetAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PencaDTO> PencasPutAsync(long id, PencaDTO body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PencaDTO> PencasPutAsync(long id, PencaDTO body, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PencasDeleteAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PencasDeleteAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PencaDTO> PencasPatchAsync(long id, PencaDTO body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PencaDTO> PencasPatchAsync(long id, PencaDTO body, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MatchDTO> MatchesGetAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MatchDTO> MatchesGetAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MatchDTO> MatchesPutAsync(long id, MatchDTO body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MatchDTO> MatchesPutAsync(long id, MatchDTO body, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MatchesDeleteAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MatchesDeleteAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MatchDTO> MatchesPatchAsync(long id, MatchDTO body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MatchDTO> MatchesPatchAsync(long id, MatchDTO body, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AppUserDTO> AppUsersGetAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AppUserDTO> AppUsersGetAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AppUserDTO> AppUsersPutAsync(long id, AppUserDTO body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AppUserDTO> AppUsersPutAsync(long id, AppUserDTO body, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AppUsersDeleteAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AppUsersDeleteAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AppUserDTO> AppUsersPatchAsync(long id, AppUserDTO body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AppUserDTO> AppUsersPatchAsync(long id, AppUserDTO body, System.Threading.CancellationToken cancellationToken);

        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TournamentDTO>> TournamentsGetAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, string? name_contains, string? name_doesNotContain, string? name_equals, string? name_notEquals, bool? name_specified, System.Collections.Generic.IEnumerable<string>? name_in, System.Collections.Generic.IEnumerable<string>? name_notIn, System.DateTimeOffset? startDate_greaterThan, System.DateTimeOffset? startDate_lessThan, System.DateTimeOffset? startDate_greaterThanOrEqual, System.DateTimeOffset? startDate_lessThanOrEqual, System.DateTimeOffset? startDate_equals, System.DateTimeOffset? startDate_notEquals, bool? startDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_notIn, System.DateTimeOffset? endDate_greaterThan, System.DateTimeOffset? endDate_lessThan, System.DateTimeOffset? endDate_greaterThanOrEqual, System.DateTimeOffset? endDate_lessThanOrEqual, System.DateTimeOffset? endDate_equals, System.DateTimeOffset? endDate_notEquals, bool? endDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_notIn, long? teamId_greaterThan, long? teamId_lessThan, long? teamId_greaterThanOrEqual, long? teamId_lessThanOrEqual, long? teamId_equals, long? teamId_notEquals, bool? teamId_specified, System.Collections.Generic.IEnumerable<long>? teamId_in, System.Collections.Generic.IEnumerable<long>? teamId_notIn, long? pencaId_greaterThan, long? pencaId_lessThan, long? pencaId_greaterThanOrEqual, long? pencaId_lessThanOrEqual, long? pencaId_equals, long? pencaId_notEquals, bool? pencaId_specified, System.Collections.Generic.IEnumerable<long>? pencaId_in, System.Collections.Generic.IEnumerable<long>? pencaId_notIn, long? matchId_greaterThan, long? matchId_lessThan, long? matchId_greaterThanOrEqual, long? matchId_lessThanOrEqual, long? matchId_equals, long? matchId_notEquals, bool? matchId_specified, System.Collections.Generic.IEnumerable<long>? matchId_in, System.Collections.Generic.IEnumerable<long>? matchId_notIn, long? appUserId_greaterThan, long? appUserId_lessThan, long? appUserId_greaterThanOrEqual, long? appUserId_lessThanOrEqual, long? appUserId_equals, long? appUserId_notEquals, bool? appUserId_specified, System.Collections.Generic.IEnumerable<long>? appUserId_in, System.Collections.Generic.IEnumerable<long>? appUserId_notIn, bool? distinct, int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TournamentDTO>> TournamentsGetAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, string? name_contains, string? name_doesNotContain, string? name_equals, string? name_notEquals, bool? name_specified, System.Collections.Generic.IEnumerable<string>? name_in, System.Collections.Generic.IEnumerable<string>? name_notIn, System.DateTimeOffset? startDate_greaterThan, System.DateTimeOffset? startDate_lessThan, System.DateTimeOffset? startDate_greaterThanOrEqual, System.DateTimeOffset? startDate_lessThanOrEqual, System.DateTimeOffset? startDate_equals, System.DateTimeOffset? startDate_notEquals, bool? startDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_notIn, System.DateTimeOffset? endDate_greaterThan, System.DateTimeOffset? endDate_lessThan, System.DateTimeOffset? endDate_greaterThanOrEqual, System.DateTimeOffset? endDate_lessThanOrEqual, System.DateTimeOffset? endDate_equals, System.DateTimeOffset? endDate_notEquals, bool? endDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_notIn, long? teamId_greaterThan, long? teamId_lessThan, long? teamId_greaterThanOrEqual, long? teamId_lessThanOrEqual, long? teamId_equals, long? teamId_notEquals, bool? teamId_specified, System.Collections.Generic.IEnumerable<long>? teamId_in, System.Collections.Generic.IEnumerable<long>? teamId_notIn, long? pencaId_greaterThan, long? pencaId_lessThan, long? pencaId_greaterThanOrEqual, long? pencaId_lessThanOrEqual, long? pencaId_equals, long? pencaId_notEquals, bool? pencaId_specified, System.Collections.Generic.IEnumerable<long>? pencaId_in, System.Collections.Generic.IEnumerable<long>? pencaId_notIn, long? matchId_greaterThan, long? matchId_lessThan, long? matchId_greaterThanOrEqual, long? matchId_lessThanOrEqual, long? matchId_equals, long? matchId_notEquals, bool? matchId_specified, System.Collections.Generic.IEnumerable<long>? matchId_in, System.Collections.Generic.IEnumerable<long>? matchId_notIn, long? appUserId_greaterThan, long? appUserId_lessThan, long? appUserId_greaterThanOrEqual, long? appUserId_lessThanOrEqual, long? appUserId_equals, long? appUserId_notEquals, bool? appUserId_specified, System.Collections.Generic.IEnumerable<long>? appUserId_in, System.Collections.Generic.IEnumerable<long>? appUserId_notIn, bool? distinct, int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TournamentDTO> TournamentsPostAsync(TournamentDTO body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TournamentDTO> TournamentsPostAsync(TournamentDTO body, System.Threading.CancellationToken cancellationToken);

        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TeamDTO>> TeamsGetAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, string? name_contains, string? name_doesNotContain, string? name_equals, string? name_notEquals, bool? name_specified, System.Collections.Generic.IEnumerable<string>? name_in, System.Collections.Generic.IEnumerable<string>? name_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, bool? distinct, int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TeamDTO>> TeamsGetAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, string? name_contains, string? name_doesNotContain, string? name_equals, string? name_notEquals, bool? name_specified, System.Collections.Generic.IEnumerable<string>? name_in, System.Collections.Generic.IEnumerable<string>? name_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, bool? distinct, int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TeamDTO> TeamsPostAsync(TeamDTO body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TeamDTO> TeamsPostAsync(TeamDTO body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RegisterAsync(ManagedUserVM body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RegisterAsync(ManagedUserVM body, System.Threading.CancellationToken cancellationToken);

        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PredictionDTO>> PredictionsGetAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, int? homeTeamScore_greaterThan, int? homeTeamScore_lessThan, int? homeTeamScore_greaterThanOrEqual, int? homeTeamScore_lessThanOrEqual, int? homeTeamScore_equals, int? homeTeamScore_notEquals, bool? homeTeamScore_specified, System.Collections.Generic.IEnumerable<int>? homeTeamScore_in, System.Collections.Generic.IEnumerable<int>? homeTeamScore_notIn, int? awayTeamScore_greaterThan, int? awayTeamScore_lessThan, int? awayTeamScore_greaterThanOrEqual, int? awayTeamScore_lessThanOrEqual, int? awayTeamScore_equals, int? awayTeamScore_notEquals, bool? awayTeamScore_specified, System.Collections.Generic.IEnumerable<int>? awayTeamScore_in, System.Collections.Generic.IEnumerable<int>? awayTeamScore_notIn, int? points_greaterThan, int? points_lessThan, int? points_greaterThanOrEqual, int? points_lessThanOrEqual, int? points_equals, int? points_notEquals, bool? points_specified, System.Collections.Generic.IEnumerable<int>? points_in, System.Collections.Generic.IEnumerable<int>? points_notIn, long? matchId_greaterThan, long? matchId_lessThan, long? matchId_greaterThanOrEqual, long? matchId_lessThanOrEqual, long? matchId_equals, long? matchId_notEquals, bool? matchId_specified, System.Collections.Generic.IEnumerable<long>? matchId_in, System.Collections.Generic.IEnumerable<long>? matchId_notIn, long? pencaId_greaterThan, long? pencaId_lessThan, long? pencaId_greaterThanOrEqual, long? pencaId_lessThanOrEqual, long? pencaId_equals, long? pencaId_notEquals, bool? pencaId_specified, System.Collections.Generic.IEnumerable<long>? pencaId_in, System.Collections.Generic.IEnumerable<long>? pencaId_notIn, long? userId_greaterThan, long? userId_lessThan, long? userId_greaterThanOrEqual, long? userId_lessThanOrEqual, long? userId_equals, long? userId_notEquals, bool? userId_specified, System.Collections.Generic.IEnumerable<long>? userId_in, System.Collections.Generic.IEnumerable<long>? userId_notIn, bool? distinct, int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PredictionDTO>> PredictionsGetAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, int? homeTeamScore_greaterThan, int? homeTeamScore_lessThan, int? homeTeamScore_greaterThanOrEqual, int? homeTeamScore_lessThanOrEqual, int? homeTeamScore_equals, int? homeTeamScore_notEquals, bool? homeTeamScore_specified, System.Collections.Generic.IEnumerable<int>? homeTeamScore_in, System.Collections.Generic.IEnumerable<int>? homeTeamScore_notIn, int? awayTeamScore_greaterThan, int? awayTeamScore_lessThan, int? awayTeamScore_greaterThanOrEqual, int? awayTeamScore_lessThanOrEqual, int? awayTeamScore_equals, int? awayTeamScore_notEquals, bool? awayTeamScore_specified, System.Collections.Generic.IEnumerable<int>? awayTeamScore_in, System.Collections.Generic.IEnumerable<int>? awayTeamScore_notIn, int? points_greaterThan, int? points_lessThan, int? points_greaterThanOrEqual, int? points_lessThanOrEqual, int? points_equals, int? points_notEquals, bool? points_specified, System.Collections.Generic.IEnumerable<int>? points_in, System.Collections.Generic.IEnumerable<int>? points_notIn, long? matchId_greaterThan, long? matchId_lessThan, long? matchId_greaterThanOrEqual, long? matchId_lessThanOrEqual, long? matchId_equals, long? matchId_notEquals, bool? matchId_specified, System.Collections.Generic.IEnumerable<long>? matchId_in, System.Collections.Generic.IEnumerable<long>? matchId_notIn, long? pencaId_greaterThan, long? pencaId_lessThan, long? pencaId_greaterThanOrEqual, long? pencaId_lessThanOrEqual, long? pencaId_equals, long? pencaId_notEquals, bool? pencaId_specified, System.Collections.Generic.IEnumerable<long>? pencaId_in, System.Collections.Generic.IEnumerable<long>? pencaId_notIn, long? userId_greaterThan, long? userId_lessThan, long? userId_greaterThanOrEqual, long? userId_lessThanOrEqual, long? userId_equals, long? userId_notEquals, bool? userId_specified, System.Collections.Generic.IEnumerable<long>? userId_in, System.Collections.Generic.IEnumerable<long>? userId_notIn, bool? distinct, int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PredictionDTO> PredictionsPostAsync(PredictionDTO body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PredictionDTO> PredictionsPostAsync(PredictionDTO body, System.Threading.CancellationToken cancellationToken);

        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PencaDTO>> PencasGetAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, string? name_contains, string? name_doesNotContain, string? name_equals, string? name_notEquals, bool? name_specified, System.Collections.Generic.IEnumerable<string>? name_in, System.Collections.Generic.IEnumerable<string>? name_notIn, System.DateTimeOffset? startDate_greaterThan, System.DateTimeOffset? startDate_lessThan, System.DateTimeOffset? startDate_greaterThanOrEqual, System.DateTimeOffset? startDate_lessThanOrEqual, System.DateTimeOffset? startDate_equals, System.DateTimeOffset? startDate_notEquals, bool? startDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_notIn, System.DateTimeOffset? endDate_greaterThan, System.DateTimeOffset? endDate_lessThan, System.DateTimeOffset? endDate_greaterThanOrEqual, System.DateTimeOffset? endDate_lessThanOrEqual, System.DateTimeOffset? endDate_equals, System.DateTimeOffset? endDate_notEquals, bool? endDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, long? predictionId_greaterThan, long? predictionId_lessThan, long? predictionId_greaterThanOrEqual, long? predictionId_lessThanOrEqual, long? predictionId_equals, long? predictionId_notEquals, bool? predictionId_specified, System.Collections.Generic.IEnumerable<long>? predictionId_in, System.Collections.Generic.IEnumerable<long>? predictionId_notIn, bool? distinct, int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PencaDTO>> PencasGetAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, string? name_contains, string? name_doesNotContain, string? name_equals, string? name_notEquals, bool? name_specified, System.Collections.Generic.IEnumerable<string>? name_in, System.Collections.Generic.IEnumerable<string>? name_notIn, System.DateTimeOffset? startDate_greaterThan, System.DateTimeOffset? startDate_lessThan, System.DateTimeOffset? startDate_greaterThanOrEqual, System.DateTimeOffset? startDate_lessThanOrEqual, System.DateTimeOffset? startDate_equals, System.DateTimeOffset? startDate_notEquals, bool? startDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_notIn, System.DateTimeOffset? endDate_greaterThan, System.DateTimeOffset? endDate_lessThan, System.DateTimeOffset? endDate_greaterThanOrEqual, System.DateTimeOffset? endDate_lessThanOrEqual, System.DateTimeOffset? endDate_equals, System.DateTimeOffset? endDate_notEquals, bool? endDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, long? predictionId_greaterThan, long? predictionId_lessThan, long? predictionId_greaterThanOrEqual, long? predictionId_lessThanOrEqual, long? predictionId_equals, long? predictionId_notEquals, bool? predictionId_specified, System.Collections.Generic.IEnumerable<long>? predictionId_in, System.Collections.Generic.IEnumerable<long>? predictionId_notIn, bool? distinct, int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PencaDTO> PencasPostAsync(PencaDTO body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PencaDTO> PencasPostAsync(PencaDTO body, System.Threading.CancellationToken cancellationToken);

        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MatchDTO>> MatchesGetAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, System.DateTimeOffset? date_greaterThan, System.DateTimeOffset? date_lessThan, System.DateTimeOffset? date_greaterThanOrEqual, System.DateTimeOffset? date_lessThanOrEqual, System.DateTimeOffset? date_equals, System.DateTimeOffset? date_notEquals, bool? date_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? date_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? date_notIn, int? homeTeamScore_greaterThan, int? homeTeamScore_lessThan, int? homeTeamScore_greaterThanOrEqual, int? homeTeamScore_lessThanOrEqual, int? homeTeamScore_equals, int? homeTeamScore_notEquals, bool? homeTeamScore_specified, System.Collections.Generic.IEnumerable<int>? homeTeamScore_in, System.Collections.Generic.IEnumerable<int>? homeTeamScore_notIn, int? awayTeamScore_greaterThan, int? awayTeamScore_lessThan, int? awayTeamScore_greaterThanOrEqual, int? awayTeamScore_lessThanOrEqual, int? awayTeamScore_equals, int? awayTeamScore_notEquals, bool? awayTeamScore_specified, System.Collections.Generic.IEnumerable<int>? awayTeamScore_in, System.Collections.Generic.IEnumerable<int>? awayTeamScore_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, long? homeTeamId_greaterThan, long? homeTeamId_lessThan, long? homeTeamId_greaterThanOrEqual, long? homeTeamId_lessThanOrEqual, long? homeTeamId_equals, long? homeTeamId_notEquals, bool? homeTeamId_specified, System.Collections.Generic.IEnumerable<long>? homeTeamId_in, System.Collections.Generic.IEnumerable<long>? homeTeamId_notIn, long? awayTeamId_greaterThan, long? awayTeamId_lessThan, long? awayTeamId_greaterThanOrEqual, long? awayTeamId_lessThanOrEqual, long? awayTeamId_equals, long? awayTeamId_notEquals, bool? awayTeamId_specified, System.Collections.Generic.IEnumerable<long>? awayTeamId_in, System.Collections.Generic.IEnumerable<long>? awayTeamId_notIn, long? predictionId_greaterThan, long? predictionId_lessThan, long? predictionId_greaterThanOrEqual, long? predictionId_lessThanOrEqual, long? predictionId_equals, long? predictionId_notEquals, bool? predictionId_specified, System.Collections.Generic.IEnumerable<long>? predictionId_in, System.Collections.Generic.IEnumerable<long>? predictionId_notIn, bool? distinct, int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MatchDTO>> MatchesGetAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, System.DateTimeOffset? date_greaterThan, System.DateTimeOffset? date_lessThan, System.DateTimeOffset? date_greaterThanOrEqual, System.DateTimeOffset? date_lessThanOrEqual, System.DateTimeOffset? date_equals, System.DateTimeOffset? date_notEquals, bool? date_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? date_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? date_notIn, int? homeTeamScore_greaterThan, int? homeTeamScore_lessThan, int? homeTeamScore_greaterThanOrEqual, int? homeTeamScore_lessThanOrEqual, int? homeTeamScore_equals, int? homeTeamScore_notEquals, bool? homeTeamScore_specified, System.Collections.Generic.IEnumerable<int>? homeTeamScore_in, System.Collections.Generic.IEnumerable<int>? homeTeamScore_notIn, int? awayTeamScore_greaterThan, int? awayTeamScore_lessThan, int? awayTeamScore_greaterThanOrEqual, int? awayTeamScore_lessThanOrEqual, int? awayTeamScore_equals, int? awayTeamScore_notEquals, bool? awayTeamScore_specified, System.Collections.Generic.IEnumerable<int>? awayTeamScore_in, System.Collections.Generic.IEnumerable<int>? awayTeamScore_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, long? homeTeamId_greaterThan, long? homeTeamId_lessThan, long? homeTeamId_greaterThanOrEqual, long? homeTeamId_lessThanOrEqual, long? homeTeamId_equals, long? homeTeamId_notEquals, bool? homeTeamId_specified, System.Collections.Generic.IEnumerable<long>? homeTeamId_in, System.Collections.Generic.IEnumerable<long>? homeTeamId_notIn, long? awayTeamId_greaterThan, long? awayTeamId_lessThan, long? awayTeamId_greaterThanOrEqual, long? awayTeamId_lessThanOrEqual, long? awayTeamId_equals, long? awayTeamId_notEquals, bool? awayTeamId_specified, System.Collections.Generic.IEnumerable<long>? awayTeamId_in, System.Collections.Generic.IEnumerable<long>? awayTeamId_notIn, long? predictionId_greaterThan, long? predictionId_lessThan, long? predictionId_greaterThanOrEqual, long? predictionId_lessThanOrEqual, long? predictionId_equals, long? predictionId_notEquals, bool? predictionId_specified, System.Collections.Generic.IEnumerable<long>? predictionId_in, System.Collections.Generic.IEnumerable<long>? predictionId_notIn, bool? distinct, int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MatchDTO> MatchesPostAsync(MatchDTO body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MatchDTO> MatchesPostAsync(MatchDTO body, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Authority>> AuthoritiesGetAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Authority>> AuthoritiesGetAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Authority> AuthoritiesPostAsync(Authority body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Authority> AuthoritiesPostAsync(Authority body, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> AuthenticateGetAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> AuthenticateGetAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JWTToken> AuthenticatePostAsync(LoginVM body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JWTToken> AuthenticatePostAsync(LoginVM body, System.Threading.CancellationToken cancellationToken);

        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AppUserDTO>> AppUsersGetAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, long? userId_greaterThan, long? userId_lessThan, long? userId_greaterThanOrEqual, long? userId_lessThanOrEqual, long? userId_equals, long? userId_notEquals, bool? userId_specified, System.Collections.Generic.IEnumerable<long>? userId_in, System.Collections.Generic.IEnumerable<long>? userId_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, bool? distinct, int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AppUserDTO>> AppUsersGetAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, long? userId_greaterThan, long? userId_lessThan, long? userId_greaterThanOrEqual, long? userId_lessThanOrEqual, long? userId_equals, long? userId_notEquals, bool? userId_specified, System.Collections.Generic.IEnumerable<long>? userId_in, System.Collections.Generic.IEnumerable<long>? userId_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, bool? distinct, int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AppUserDTO> AppUsersPostAsync(AppUserDTO body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AppUserDTO> AppUsersPostAsync(AppUserDTO body, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdminUserDTO> AccountGetAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdminUserDTO> AccountGetAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AccountPostAsync(AdminUserDTO body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AccountPostAsync(AdminUserDTO body, System.Threading.CancellationToken cancellationToken);

        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserDTO>> UsersAsync(int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserDTO>> UsersAsync(int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Authority> AuthoritiesGetAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Authority> AuthoritiesGetAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AuthoritiesDeleteAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AuthoritiesDeleteAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ActivateAsync(string key);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ActivateAsync(string key, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiClient : IApiClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public ApiClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://pencapp-0848c949be13.herokuapp.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All };
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TournamentDTO> TournamentsGetAsync(long id)
        {
            return TournamentsGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TournamentDTO> TournamentsGetAsync(long id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/tournaments/{id}"
                    urlBuilder_.Append("api/tournaments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TournamentDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TournamentDTO> TournamentsPutAsync(long id, TournamentDTO body)
        {
            return TournamentsPutAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TournamentDTO> TournamentsPutAsync(long id, TournamentDTO body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/tournaments/{id}"
                    urlBuilder_.Append("api/tournaments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TournamentDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task TournamentsDeleteAsync(long id)
        {
            return TournamentsDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task TournamentsDeleteAsync(long id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/tournaments/{id}"
                    urlBuilder_.Append("api/tournaments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TournamentDTO> TournamentsPatchAsync(long id, TournamentDTO body)
        {
            return TournamentsPatchAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TournamentDTO> TournamentsPatchAsync(long id, TournamentDTO body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/tournaments/{id}"
                    urlBuilder_.Append("api/tournaments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TournamentDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TeamDTO> TeamsGetAsync(long id)
        {
            return TeamsGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TeamDTO> TeamsGetAsync(long id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/teams/{id}"
                    urlBuilder_.Append("api/teams/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TeamDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TeamDTO> TeamsPutAsync(long id, TeamDTO body)
        {
            return TeamsPutAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TeamDTO> TeamsPutAsync(long id, TeamDTO body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/teams/{id}"
                    urlBuilder_.Append("api/teams/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TeamDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task TeamsDeleteAsync(long id)
        {
            return TeamsDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task TeamsDeleteAsync(long id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/teams/{id}"
                    urlBuilder_.Append("api/teams/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TeamDTO> TeamsPatchAsync(long id, TeamDTO body)
        {
            return TeamsPatchAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TeamDTO> TeamsPatchAsync(long id, TeamDTO body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/teams/{id}"
                    urlBuilder_.Append("api/teams/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TeamDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PredictionDTO> PredictionsGetAsync(long id)
        {
            return PredictionsGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PredictionDTO> PredictionsGetAsync(long id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/predictions/{id}"
                    urlBuilder_.Append("api/predictions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PredictionDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PredictionDTO> PredictionsPutAsync(long id, PredictionDTO body)
        {
            return PredictionsPutAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PredictionDTO> PredictionsPutAsync(long id, PredictionDTO body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/predictions/{id}"
                    urlBuilder_.Append("api/predictions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PredictionDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task PredictionsDeleteAsync(long id)
        {
            return PredictionsDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PredictionsDeleteAsync(long id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/predictions/{id}"
                    urlBuilder_.Append("api/predictions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PredictionDTO> PredictionsPatchAsync(long id, PredictionDTO body)
        {
            return PredictionsPatchAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PredictionDTO> PredictionsPatchAsync(long id, PredictionDTO body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/predictions/{id}"
                    urlBuilder_.Append("api/predictions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PredictionDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PencaDTO> PencasGetAsync(long id)
        {
            return PencasGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PencaDTO> PencasGetAsync(long id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/pencas/{id}"
                    urlBuilder_.Append("api/pencas/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PencaDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PencaDTO> PencasPutAsync(long id, PencaDTO body)
        {
            return PencasPutAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PencaDTO> PencasPutAsync(long id, PencaDTO body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/pencas/{id}"
                    urlBuilder_.Append("api/pencas/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PencaDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task PencasDeleteAsync(long id)
        {
            return PencasDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PencasDeleteAsync(long id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/pencas/{id}"
                    urlBuilder_.Append("api/pencas/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PencaDTO> PencasPatchAsync(long id, PencaDTO body)
        {
            return PencasPatchAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PencaDTO> PencasPatchAsync(long id, PencaDTO body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/pencas/{id}"
                    urlBuilder_.Append("api/pencas/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PencaDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MatchDTO> MatchesGetAsync(long id)
        {
            return MatchesGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MatchDTO> MatchesGetAsync(long id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/matches/{id}"
                    urlBuilder_.Append("api/matches/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MatchDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MatchDTO> MatchesPutAsync(long id, MatchDTO body)
        {
            return MatchesPutAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MatchDTO> MatchesPutAsync(long id, MatchDTO body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/matches/{id}"
                    urlBuilder_.Append("api/matches/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MatchDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task MatchesDeleteAsync(long id)
        {
            return MatchesDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task MatchesDeleteAsync(long id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/matches/{id}"
                    urlBuilder_.Append("api/matches/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MatchDTO> MatchesPatchAsync(long id, MatchDTO body)
        {
            return MatchesPatchAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MatchDTO> MatchesPatchAsync(long id, MatchDTO body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/matches/{id}"
                    urlBuilder_.Append("api/matches/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MatchDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AppUserDTO> AppUsersGetAsync(long id)
        {
            return AppUsersGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AppUserDTO> AppUsersGetAsync(long id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/app-users/{id}"
                    urlBuilder_.Append("api/app-users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AppUserDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AppUserDTO> AppUsersPutAsync(long id, AppUserDTO body)
        {
            return AppUsersPutAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AppUserDTO> AppUsersPutAsync(long id, AppUserDTO body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/app-users/{id}"
                    urlBuilder_.Append("api/app-users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AppUserDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AppUsersDeleteAsync(long id)
        {
            return AppUsersDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AppUsersDeleteAsync(long id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/app-users/{id}"
                    urlBuilder_.Append("api/app-users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AppUserDTO> AppUsersPatchAsync(long id, AppUserDTO body)
        {
            return AppUsersPatchAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AppUserDTO> AppUsersPatchAsync(long id, AppUserDTO body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/app-users/{id}"
                    urlBuilder_.Append("api/app-users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AppUserDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TournamentDTO>> TournamentsGetAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, string? name_contains, string? name_doesNotContain, string? name_equals, string? name_notEquals, bool? name_specified, System.Collections.Generic.IEnumerable<string>? name_in, System.Collections.Generic.IEnumerable<string>? name_notIn, System.DateTimeOffset? startDate_greaterThan, System.DateTimeOffset? startDate_lessThan, System.DateTimeOffset? startDate_greaterThanOrEqual, System.DateTimeOffset? startDate_lessThanOrEqual, System.DateTimeOffset? startDate_equals, System.DateTimeOffset? startDate_notEquals, bool? startDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_notIn, System.DateTimeOffset? endDate_greaterThan, System.DateTimeOffset? endDate_lessThan, System.DateTimeOffset? endDate_greaterThanOrEqual, System.DateTimeOffset? endDate_lessThanOrEqual, System.DateTimeOffset? endDate_equals, System.DateTimeOffset? endDate_notEquals, bool? endDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_notIn, long? teamId_greaterThan, long? teamId_lessThan, long? teamId_greaterThanOrEqual, long? teamId_lessThanOrEqual, long? teamId_equals, long? teamId_notEquals, bool? teamId_specified, System.Collections.Generic.IEnumerable<long>? teamId_in, System.Collections.Generic.IEnumerable<long>? teamId_notIn, long? pencaId_greaterThan, long? pencaId_lessThan, long? pencaId_greaterThanOrEqual, long? pencaId_lessThanOrEqual, long? pencaId_equals, long? pencaId_notEquals, bool? pencaId_specified, System.Collections.Generic.IEnumerable<long>? pencaId_in, System.Collections.Generic.IEnumerable<long>? pencaId_notIn, long? matchId_greaterThan, long? matchId_lessThan, long? matchId_greaterThanOrEqual, long? matchId_lessThanOrEqual, long? matchId_equals, long? matchId_notEquals, bool? matchId_specified, System.Collections.Generic.IEnumerable<long>? matchId_in, System.Collections.Generic.IEnumerable<long>? matchId_notIn, long? appUserId_greaterThan, long? appUserId_lessThan, long? appUserId_greaterThanOrEqual, long? appUserId_lessThanOrEqual, long? appUserId_equals, long? appUserId_notEquals, bool? appUserId_specified, System.Collections.Generic.IEnumerable<long>? appUserId_in, System.Collections.Generic.IEnumerable<long>? appUserId_notIn, bool? distinct, int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort)
        {
            return TournamentsGetAsync(id_greaterThan, id_lessThan, id_greaterThanOrEqual, id_lessThanOrEqual, id_equals, id_notEquals, id_specified, id_in, id_notIn, name_contains, name_doesNotContain, name_equals, name_notEquals, name_specified, name_in, name_notIn, startDate_greaterThan, startDate_lessThan, startDate_greaterThanOrEqual, startDate_lessThanOrEqual, startDate_equals, startDate_notEquals, startDate_specified, startDate_in, startDate_notIn, endDate_greaterThan, endDate_lessThan, endDate_greaterThanOrEqual, endDate_lessThanOrEqual, endDate_equals, endDate_notEquals, endDate_specified, endDate_in, endDate_notIn, teamId_greaterThan, teamId_lessThan, teamId_greaterThanOrEqual, teamId_lessThanOrEqual, teamId_equals, teamId_notEquals, teamId_specified, teamId_in, teamId_notIn, pencaId_greaterThan, pencaId_lessThan, pencaId_greaterThanOrEqual, pencaId_lessThanOrEqual, pencaId_equals, pencaId_notEquals, pencaId_specified, pencaId_in, pencaId_notIn, matchId_greaterThan, matchId_lessThan, matchId_greaterThanOrEqual, matchId_lessThanOrEqual, matchId_equals, matchId_notEquals, matchId_specified, matchId_in, matchId_notIn, appUserId_greaterThan, appUserId_lessThan, appUserId_greaterThanOrEqual, appUserId_lessThanOrEqual, appUserId_equals, appUserId_notEquals, appUserId_specified, appUserId_in, appUserId_notIn, distinct, page, size, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TournamentDTO>> TournamentsGetAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, string? name_contains, string? name_doesNotContain, string? name_equals, string? name_notEquals, bool? name_specified, System.Collections.Generic.IEnumerable<string>? name_in, System.Collections.Generic.IEnumerable<string>? name_notIn, System.DateTimeOffset? startDate_greaterThan, System.DateTimeOffset? startDate_lessThan, System.DateTimeOffset? startDate_greaterThanOrEqual, System.DateTimeOffset? startDate_lessThanOrEqual, System.DateTimeOffset? startDate_equals, System.DateTimeOffset? startDate_notEquals, bool? startDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_notIn, System.DateTimeOffset? endDate_greaterThan, System.DateTimeOffset? endDate_lessThan, System.DateTimeOffset? endDate_greaterThanOrEqual, System.DateTimeOffset? endDate_lessThanOrEqual, System.DateTimeOffset? endDate_equals, System.DateTimeOffset? endDate_notEquals, bool? endDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_notIn, long? teamId_greaterThan, long? teamId_lessThan, long? teamId_greaterThanOrEqual, long? teamId_lessThanOrEqual, long? teamId_equals, long? teamId_notEquals, bool? teamId_specified, System.Collections.Generic.IEnumerable<long>? teamId_in, System.Collections.Generic.IEnumerable<long>? teamId_notIn, long? pencaId_greaterThan, long? pencaId_lessThan, long? pencaId_greaterThanOrEqual, long? pencaId_lessThanOrEqual, long? pencaId_equals, long? pencaId_notEquals, bool? pencaId_specified, System.Collections.Generic.IEnumerable<long>? pencaId_in, System.Collections.Generic.IEnumerable<long>? pencaId_notIn, long? matchId_greaterThan, long? matchId_lessThan, long? matchId_greaterThanOrEqual, long? matchId_lessThanOrEqual, long? matchId_equals, long? matchId_notEquals, bool? matchId_specified, System.Collections.Generic.IEnumerable<long>? matchId_in, System.Collections.Generic.IEnumerable<long>? matchId_notIn, long? appUserId_greaterThan, long? appUserId_lessThan, long? appUserId_greaterThanOrEqual, long? appUserId_lessThanOrEqual, long? appUserId_equals, long? appUserId_notEquals, bool? appUserId_specified, System.Collections.Generic.IEnumerable<long>? appUserId_in, System.Collections.Generic.IEnumerable<long>? appUserId_notIn, bool? distinct, int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/tournaments"
                    urlBuilder_.Append("api/tournaments");
                    urlBuilder_.Append('?');
                    if (id_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_in != null)
                    {
                        foreach (var item_ in id_in) { urlBuilder_.Append(System.Uri.EscapeDataString("id.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (id_notIn != null)
                    {
                        foreach (var item_ in id_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("id.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (name_contains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.contains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_contains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_doesNotContain != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.doesNotContain")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_doesNotContain, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_in != null)
                    {
                        foreach (var item_ in name_in) { urlBuilder_.Append(System.Uri.EscapeDataString("name.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (name_notIn != null)
                    {
                        foreach (var item_ in name_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("name.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (startDate_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(startDate_greaterThan.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.lessThan")).Append('=').Append(System.Uri.EscapeDataString(startDate_lessThan.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(startDate_greaterThanOrEqual.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(startDate_lessThanOrEqual.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.equals")).Append('=').Append(System.Uri.EscapeDataString(startDate_equals.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.notEquals")).Append('=').Append(System.Uri.EscapeDataString(startDate_notEquals.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startDate_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_in != null)
                    {
                        foreach (var item_ in startDate_in) { urlBuilder_.Append(System.Uri.EscapeDataString("startDate.in")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (startDate_notIn != null)
                    {
                        foreach (var item_ in startDate_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("startDate.notIn")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (endDate_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(endDate_greaterThan.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.lessThan")).Append('=').Append(System.Uri.EscapeDataString(endDate_lessThan.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(endDate_greaterThanOrEqual.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(endDate_lessThanOrEqual.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.equals")).Append('=').Append(System.Uri.EscapeDataString(endDate_equals.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.notEquals")).Append('=').Append(System.Uri.EscapeDataString(endDate_notEquals.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(endDate_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_in != null)
                    {
                        foreach (var item_ in endDate_in) { urlBuilder_.Append(System.Uri.EscapeDataString("endDate.in")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (endDate_notIn != null)
                    {
                        foreach (var item_ in endDate_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("endDate.notIn")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (teamId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_in != null)
                    {
                        foreach (var item_ in teamId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("teamId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (teamId_notIn != null)
                    {
                        foreach (var item_ in teamId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("teamId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pencaId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_in != null)
                    {
                        foreach (var item_ in pencaId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pencaId_notIn != null)
                    {
                        foreach (var item_ in pencaId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (matchId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_in != null)
                    {
                        foreach (var item_ in matchId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("matchId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (matchId_notIn != null)
                    {
                        foreach (var item_ in matchId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("matchId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (appUserId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_in != null)
                    {
                        foreach (var item_ in appUserId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (appUserId_notIn != null)
                    {
                        foreach (var item_ in appUserId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (distinct != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("distinct")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(distinct, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                        foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TournamentDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TournamentDTO> TournamentsPostAsync(TournamentDTO body)
        {
            return TournamentsPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TournamentDTO> TournamentsPostAsync(TournamentDTO body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/tournaments"
                    urlBuilder_.Append("api/tournaments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TournamentDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TeamDTO>> TeamsGetAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, string? name_contains, string? name_doesNotContain, string? name_equals, string? name_notEquals, bool? name_specified, System.Collections.Generic.IEnumerable<string>? name_in, System.Collections.Generic.IEnumerable<string>? name_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, bool? distinct, int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort)
        {
            return TeamsGetAsync(id_greaterThan, id_lessThan, id_greaterThanOrEqual, id_lessThanOrEqual, id_equals, id_notEquals, id_specified, id_in, id_notIn, name_contains, name_doesNotContain, name_equals, name_notEquals, name_specified, name_in, name_notIn, tournamentId_greaterThan, tournamentId_lessThan, tournamentId_greaterThanOrEqual, tournamentId_lessThanOrEqual, tournamentId_equals, tournamentId_notEquals, tournamentId_specified, tournamentId_in, tournamentId_notIn, distinct, page, size, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TeamDTO>> TeamsGetAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, string? name_contains, string? name_doesNotContain, string? name_equals, string? name_notEquals, bool? name_specified, System.Collections.Generic.IEnumerable<string>? name_in, System.Collections.Generic.IEnumerable<string>? name_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, bool? distinct, int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/teams"
                    urlBuilder_.Append("api/teams");
                    urlBuilder_.Append('?');
                    if (id_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_in != null)
                    {
                        foreach (var item_ in id_in) { urlBuilder_.Append(System.Uri.EscapeDataString("id.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (id_notIn != null)
                    {
                        foreach (var item_ in id_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("id.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (name_contains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.contains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_contains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_doesNotContain != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.doesNotContain")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_doesNotContain, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_in != null)
                    {
                        foreach (var item_ in name_in) { urlBuilder_.Append(System.Uri.EscapeDataString("name.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (name_notIn != null)
                    {
                        foreach (var item_ in name_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("name.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_in != null)
                    {
                        foreach (var item_ in tournamentId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_notIn != null)
                    {
                        foreach (var item_ in tournamentId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (distinct != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("distinct")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(distinct, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                        foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TeamDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TeamDTO> TeamsPostAsync(TeamDTO body)
        {
            return TeamsPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TeamDTO> TeamsPostAsync(TeamDTO body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/teams"
                    urlBuilder_.Append("api/teams");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TeamDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RegisterAsync(ManagedUserVM body)
        {
            return RegisterAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RegisterAsync(ManagedUserVM body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/register"
                    urlBuilder_.Append("api/register");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PredictionDTO>> PredictionsGetAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, int? homeTeamScore_greaterThan, int? homeTeamScore_lessThan, int? homeTeamScore_greaterThanOrEqual, int? homeTeamScore_lessThanOrEqual, int? homeTeamScore_equals, int? homeTeamScore_notEquals, bool? homeTeamScore_specified, System.Collections.Generic.IEnumerable<int>? homeTeamScore_in, System.Collections.Generic.IEnumerable<int>? homeTeamScore_notIn, int? awayTeamScore_greaterThan, int? awayTeamScore_lessThan, int? awayTeamScore_greaterThanOrEqual, int? awayTeamScore_lessThanOrEqual, int? awayTeamScore_equals, int? awayTeamScore_notEquals, bool? awayTeamScore_specified, System.Collections.Generic.IEnumerable<int>? awayTeamScore_in, System.Collections.Generic.IEnumerable<int>? awayTeamScore_notIn, int? points_greaterThan, int? points_lessThan, int? points_greaterThanOrEqual, int? points_lessThanOrEqual, int? points_equals, int? points_notEquals, bool? points_specified, System.Collections.Generic.IEnumerable<int>? points_in, System.Collections.Generic.IEnumerable<int>? points_notIn, long? matchId_greaterThan, long? matchId_lessThan, long? matchId_greaterThanOrEqual, long? matchId_lessThanOrEqual, long? matchId_equals, long? matchId_notEquals, bool? matchId_specified, System.Collections.Generic.IEnumerable<long>? matchId_in, System.Collections.Generic.IEnumerable<long>? matchId_notIn, long? pencaId_greaterThan, long? pencaId_lessThan, long? pencaId_greaterThanOrEqual, long? pencaId_lessThanOrEqual, long? pencaId_equals, long? pencaId_notEquals, bool? pencaId_specified, System.Collections.Generic.IEnumerable<long>? pencaId_in, System.Collections.Generic.IEnumerable<long>? pencaId_notIn, long? userId_greaterThan, long? userId_lessThan, long? userId_greaterThanOrEqual, long? userId_lessThanOrEqual, long? userId_equals, long? userId_notEquals, bool? userId_specified, System.Collections.Generic.IEnumerable<long>? userId_in, System.Collections.Generic.IEnumerable<long>? userId_notIn, bool? distinct, int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort)
        {
            return PredictionsGetAsync(id_greaterThan, id_lessThan, id_greaterThanOrEqual, id_lessThanOrEqual, id_equals, id_notEquals, id_specified, id_in, id_notIn, homeTeamScore_greaterThan, homeTeamScore_lessThan, homeTeamScore_greaterThanOrEqual, homeTeamScore_lessThanOrEqual, homeTeamScore_equals, homeTeamScore_notEquals, homeTeamScore_specified, homeTeamScore_in, homeTeamScore_notIn, awayTeamScore_greaterThan, awayTeamScore_lessThan, awayTeamScore_greaterThanOrEqual, awayTeamScore_lessThanOrEqual, awayTeamScore_equals, awayTeamScore_notEquals, awayTeamScore_specified, awayTeamScore_in, awayTeamScore_notIn, points_greaterThan, points_lessThan, points_greaterThanOrEqual, points_lessThanOrEqual, points_equals, points_notEquals, points_specified, points_in, points_notIn, matchId_greaterThan, matchId_lessThan, matchId_greaterThanOrEqual, matchId_lessThanOrEqual, matchId_equals, matchId_notEquals, matchId_specified, matchId_in, matchId_notIn, pencaId_greaterThan, pencaId_lessThan, pencaId_greaterThanOrEqual, pencaId_lessThanOrEqual, pencaId_equals, pencaId_notEquals, pencaId_specified, pencaId_in, pencaId_notIn, userId_greaterThan, userId_lessThan, userId_greaterThanOrEqual, userId_lessThanOrEqual, userId_equals, userId_notEquals, userId_specified, userId_in, userId_notIn, distinct, page, size, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PredictionDTO>> PredictionsGetAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, int? homeTeamScore_greaterThan, int? homeTeamScore_lessThan, int? homeTeamScore_greaterThanOrEqual, int? homeTeamScore_lessThanOrEqual, int? homeTeamScore_equals, int? homeTeamScore_notEquals, bool? homeTeamScore_specified, System.Collections.Generic.IEnumerable<int>? homeTeamScore_in, System.Collections.Generic.IEnumerable<int>? homeTeamScore_notIn, int? awayTeamScore_greaterThan, int? awayTeamScore_lessThan, int? awayTeamScore_greaterThanOrEqual, int? awayTeamScore_lessThanOrEqual, int? awayTeamScore_equals, int? awayTeamScore_notEquals, bool? awayTeamScore_specified, System.Collections.Generic.IEnumerable<int>? awayTeamScore_in, System.Collections.Generic.IEnumerable<int>? awayTeamScore_notIn, int? points_greaterThan, int? points_lessThan, int? points_greaterThanOrEqual, int? points_lessThanOrEqual, int? points_equals, int? points_notEquals, bool? points_specified, System.Collections.Generic.IEnumerable<int>? points_in, System.Collections.Generic.IEnumerable<int>? points_notIn, long? matchId_greaterThan, long? matchId_lessThan, long? matchId_greaterThanOrEqual, long? matchId_lessThanOrEqual, long? matchId_equals, long? matchId_notEquals, bool? matchId_specified, System.Collections.Generic.IEnumerable<long>? matchId_in, System.Collections.Generic.IEnumerable<long>? matchId_notIn, long? pencaId_greaterThan, long? pencaId_lessThan, long? pencaId_greaterThanOrEqual, long? pencaId_lessThanOrEqual, long? pencaId_equals, long? pencaId_notEquals, bool? pencaId_specified, System.Collections.Generic.IEnumerable<long>? pencaId_in, System.Collections.Generic.IEnumerable<long>? pencaId_notIn, long? userId_greaterThan, long? userId_lessThan, long? userId_greaterThanOrEqual, long? userId_lessThanOrEqual, long? userId_equals, long? userId_notEquals, bool? userId_specified, System.Collections.Generic.IEnumerable<long>? userId_in, System.Collections.Generic.IEnumerable<long>? userId_notIn, bool? distinct, int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/predictions"
                    urlBuilder_.Append("api/predictions");
                    urlBuilder_.Append('?');
                    if (id_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_in != null)
                    {
                        foreach (var item_ in id_in) { urlBuilder_.Append(System.Uri.EscapeDataString("id.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (id_notIn != null)
                    {
                        foreach (var item_ in id_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("id.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (homeTeamScore_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_in != null)
                    {
                        foreach (var item_ in homeTeamScore_in) { urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (homeTeamScore_notIn != null)
                    {
                        foreach (var item_ in homeTeamScore_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (awayTeamScore_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_in != null)
                    {
                        foreach (var item_ in awayTeamScore_in) { urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (awayTeamScore_notIn != null)
                    {
                        foreach (var item_ in awayTeamScore_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (points_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_in != null)
                    {
                        foreach (var item_ in points_in) { urlBuilder_.Append(System.Uri.EscapeDataString("points.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (points_notIn != null)
                    {
                        foreach (var item_ in points_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("points.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (matchId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_in != null)
                    {
                        foreach (var item_ in matchId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("matchId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (matchId_notIn != null)
                    {
                        foreach (var item_ in matchId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("matchId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pencaId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_in != null)
                    {
                        foreach (var item_ in pencaId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pencaId_notIn != null)
                    {
                        foreach (var item_ in pencaId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (userId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_in != null)
                    {
                        foreach (var item_ in userId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("userId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (userId_notIn != null)
                    {
                        foreach (var item_ in userId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("userId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (distinct != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("distinct")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(distinct, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                        foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PredictionDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PredictionDTO> PredictionsPostAsync(PredictionDTO body)
        {
            return PredictionsPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PredictionDTO> PredictionsPostAsync(PredictionDTO body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/predictions"
                    urlBuilder_.Append("api/predictions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PredictionDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PencaDTO>> PencasGetAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, string? name_contains, string? name_doesNotContain, string? name_equals, string? name_notEquals, bool? name_specified, System.Collections.Generic.IEnumerable<string>? name_in, System.Collections.Generic.IEnumerable<string>? name_notIn, System.DateTimeOffset? startDate_greaterThan, System.DateTimeOffset? startDate_lessThan, System.DateTimeOffset? startDate_greaterThanOrEqual, System.DateTimeOffset? startDate_lessThanOrEqual, System.DateTimeOffset? startDate_equals, System.DateTimeOffset? startDate_notEquals, bool? startDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_notIn, System.DateTimeOffset? endDate_greaterThan, System.DateTimeOffset? endDate_lessThan, System.DateTimeOffset? endDate_greaterThanOrEqual, System.DateTimeOffset? endDate_lessThanOrEqual, System.DateTimeOffset? endDate_equals, System.DateTimeOffset? endDate_notEquals, bool? endDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, long? predictionId_greaterThan, long? predictionId_lessThan, long? predictionId_greaterThanOrEqual, long? predictionId_lessThanOrEqual, long? predictionId_equals, long? predictionId_notEquals, bool? predictionId_specified, System.Collections.Generic.IEnumerable<long>? predictionId_in, System.Collections.Generic.IEnumerable<long>? predictionId_notIn, bool? distinct, int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort)
        {
            return PencasGetAsync(id_greaterThan, id_lessThan, id_greaterThanOrEqual, id_lessThanOrEqual, id_equals, id_notEquals, id_specified, id_in, id_notIn, name_contains, name_doesNotContain, name_equals, name_notEquals, name_specified, name_in, name_notIn, startDate_greaterThan, startDate_lessThan, startDate_greaterThanOrEqual, startDate_lessThanOrEqual, startDate_equals, startDate_notEquals, startDate_specified, startDate_in, startDate_notIn, endDate_greaterThan, endDate_lessThan, endDate_greaterThanOrEqual, endDate_lessThanOrEqual, endDate_equals, endDate_notEquals, endDate_specified, endDate_in, endDate_notIn, tournamentId_greaterThan, tournamentId_lessThan, tournamentId_greaterThanOrEqual, tournamentId_lessThanOrEqual, tournamentId_equals, tournamentId_notEquals, tournamentId_specified, tournamentId_in, tournamentId_notIn, predictionId_greaterThan, predictionId_lessThan, predictionId_greaterThanOrEqual, predictionId_lessThanOrEqual, predictionId_equals, predictionId_notEquals, predictionId_specified, predictionId_in, predictionId_notIn, distinct, page, size, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PencaDTO>> PencasGetAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, string? name_contains, string? name_doesNotContain, string? name_equals, string? name_notEquals, bool? name_specified, System.Collections.Generic.IEnumerable<string>? name_in, System.Collections.Generic.IEnumerable<string>? name_notIn, System.DateTimeOffset? startDate_greaterThan, System.DateTimeOffset? startDate_lessThan, System.DateTimeOffset? startDate_greaterThanOrEqual, System.DateTimeOffset? startDate_lessThanOrEqual, System.DateTimeOffset? startDate_equals, System.DateTimeOffset? startDate_notEquals, bool? startDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_notIn, System.DateTimeOffset? endDate_greaterThan, System.DateTimeOffset? endDate_lessThan, System.DateTimeOffset? endDate_greaterThanOrEqual, System.DateTimeOffset? endDate_lessThanOrEqual, System.DateTimeOffset? endDate_equals, System.DateTimeOffset? endDate_notEquals, bool? endDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, long? predictionId_greaterThan, long? predictionId_lessThan, long? predictionId_greaterThanOrEqual, long? predictionId_lessThanOrEqual, long? predictionId_equals, long? predictionId_notEquals, bool? predictionId_specified, System.Collections.Generic.IEnumerable<long>? predictionId_in, System.Collections.Generic.IEnumerable<long>? predictionId_notIn, bool? distinct, int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/pencas"
                    urlBuilder_.Append("api/pencas");
                    urlBuilder_.Append('?');
                    if (id_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_in != null)
                    {
                        foreach (var item_ in id_in) { urlBuilder_.Append(System.Uri.EscapeDataString("id.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (id_notIn != null)
                    {
                        foreach (var item_ in id_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("id.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (name_contains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.contains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_contains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_doesNotContain != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.doesNotContain")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_doesNotContain, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_in != null)
                    {
                        foreach (var item_ in name_in) { urlBuilder_.Append(System.Uri.EscapeDataString("name.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (name_notIn != null)
                    {
                        foreach (var item_ in name_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("name.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (startDate_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(startDate_greaterThan.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.lessThan")).Append('=').Append(System.Uri.EscapeDataString(startDate_lessThan.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(startDate_greaterThanOrEqual.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(startDate_lessThanOrEqual.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.equals")).Append('=').Append(System.Uri.EscapeDataString(startDate_equals.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.notEquals")).Append('=').Append(System.Uri.EscapeDataString(startDate_notEquals.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startDate_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_in != null)
                    {
                        foreach (var item_ in startDate_in) { urlBuilder_.Append(System.Uri.EscapeDataString("startDate.in")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (startDate_notIn != null)
                    {
                        foreach (var item_ in startDate_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("startDate.notIn")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (endDate_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(endDate_greaterThan.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.lessThan")).Append('=').Append(System.Uri.EscapeDataString(endDate_lessThan.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(endDate_greaterThanOrEqual.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(endDate_lessThanOrEqual.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.equals")).Append('=').Append(System.Uri.EscapeDataString(endDate_equals.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.notEquals")).Append('=').Append(System.Uri.EscapeDataString(endDate_notEquals.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(endDate_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_in != null)
                    {
                        foreach (var item_ in endDate_in) { urlBuilder_.Append(System.Uri.EscapeDataString("endDate.in")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (endDate_notIn != null)
                    {
                        foreach (var item_ in endDate_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("endDate.notIn")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_in != null)
                    {
                        foreach (var item_ in tournamentId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_notIn != null)
                    {
                        foreach (var item_ in tournamentId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (predictionId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_in != null)
                    {
                        foreach (var item_ in predictionId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (predictionId_notIn != null)
                    {
                        foreach (var item_ in predictionId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (distinct != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("distinct")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(distinct, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                        foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PencaDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PencaDTO> PencasPostAsync(PencaDTO body)
        {
            return PencasPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PencaDTO> PencasPostAsync(PencaDTO body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/pencas"
                    urlBuilder_.Append("api/pencas");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PencaDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MatchDTO>> MatchesGetAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, System.DateTimeOffset? date_greaterThan, System.DateTimeOffset? date_lessThan, System.DateTimeOffset? date_greaterThanOrEqual, System.DateTimeOffset? date_lessThanOrEqual, System.DateTimeOffset? date_equals, System.DateTimeOffset? date_notEquals, bool? date_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? date_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? date_notIn, int? homeTeamScore_greaterThan, int? homeTeamScore_lessThan, int? homeTeamScore_greaterThanOrEqual, int? homeTeamScore_lessThanOrEqual, int? homeTeamScore_equals, int? homeTeamScore_notEquals, bool? homeTeamScore_specified, System.Collections.Generic.IEnumerable<int>? homeTeamScore_in, System.Collections.Generic.IEnumerable<int>? homeTeamScore_notIn, int? awayTeamScore_greaterThan, int? awayTeamScore_lessThan, int? awayTeamScore_greaterThanOrEqual, int? awayTeamScore_lessThanOrEqual, int? awayTeamScore_equals, int? awayTeamScore_notEquals, bool? awayTeamScore_specified, System.Collections.Generic.IEnumerable<int>? awayTeamScore_in, System.Collections.Generic.IEnumerable<int>? awayTeamScore_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, long? homeTeamId_greaterThan, long? homeTeamId_lessThan, long? homeTeamId_greaterThanOrEqual, long? homeTeamId_lessThanOrEqual, long? homeTeamId_equals, long? homeTeamId_notEquals, bool? homeTeamId_specified, System.Collections.Generic.IEnumerable<long>? homeTeamId_in, System.Collections.Generic.IEnumerable<long>? homeTeamId_notIn, long? awayTeamId_greaterThan, long? awayTeamId_lessThan, long? awayTeamId_greaterThanOrEqual, long? awayTeamId_lessThanOrEqual, long? awayTeamId_equals, long? awayTeamId_notEquals, bool? awayTeamId_specified, System.Collections.Generic.IEnumerable<long>? awayTeamId_in, System.Collections.Generic.IEnumerable<long>? awayTeamId_notIn, long? predictionId_greaterThan, long? predictionId_lessThan, long? predictionId_greaterThanOrEqual, long? predictionId_lessThanOrEqual, long? predictionId_equals, long? predictionId_notEquals, bool? predictionId_specified, System.Collections.Generic.IEnumerable<long>? predictionId_in, System.Collections.Generic.IEnumerable<long>? predictionId_notIn, bool? distinct, int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort)
        {
            return MatchesGetAsync(id_greaterThan, id_lessThan, id_greaterThanOrEqual, id_lessThanOrEqual, id_equals, id_notEquals, id_specified, id_in, id_notIn, date_greaterThan, date_lessThan, date_greaterThanOrEqual, date_lessThanOrEqual, date_equals, date_notEquals, date_specified, date_in, date_notIn, homeTeamScore_greaterThan, homeTeamScore_lessThan, homeTeamScore_greaterThanOrEqual, homeTeamScore_lessThanOrEqual, homeTeamScore_equals, homeTeamScore_notEquals, homeTeamScore_specified, homeTeamScore_in, homeTeamScore_notIn, awayTeamScore_greaterThan, awayTeamScore_lessThan, awayTeamScore_greaterThanOrEqual, awayTeamScore_lessThanOrEqual, awayTeamScore_equals, awayTeamScore_notEquals, awayTeamScore_specified, awayTeamScore_in, awayTeamScore_notIn, tournamentId_greaterThan, tournamentId_lessThan, tournamentId_greaterThanOrEqual, tournamentId_lessThanOrEqual, tournamentId_equals, tournamentId_notEquals, tournamentId_specified, tournamentId_in, tournamentId_notIn, homeTeamId_greaterThan, homeTeamId_lessThan, homeTeamId_greaterThanOrEqual, homeTeamId_lessThanOrEqual, homeTeamId_equals, homeTeamId_notEquals, homeTeamId_specified, homeTeamId_in, homeTeamId_notIn, awayTeamId_greaterThan, awayTeamId_lessThan, awayTeamId_greaterThanOrEqual, awayTeamId_lessThanOrEqual, awayTeamId_equals, awayTeamId_notEquals, awayTeamId_specified, awayTeamId_in, awayTeamId_notIn, predictionId_greaterThan, predictionId_lessThan, predictionId_greaterThanOrEqual, predictionId_lessThanOrEqual, predictionId_equals, predictionId_notEquals, predictionId_specified, predictionId_in, predictionId_notIn, distinct, page, size, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MatchDTO>> MatchesGetAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, System.DateTimeOffset? date_greaterThan, System.DateTimeOffset? date_lessThan, System.DateTimeOffset? date_greaterThanOrEqual, System.DateTimeOffset? date_lessThanOrEqual, System.DateTimeOffset? date_equals, System.DateTimeOffset? date_notEquals, bool? date_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? date_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? date_notIn, int? homeTeamScore_greaterThan, int? homeTeamScore_lessThan, int? homeTeamScore_greaterThanOrEqual, int? homeTeamScore_lessThanOrEqual, int? homeTeamScore_equals, int? homeTeamScore_notEquals, bool? homeTeamScore_specified, System.Collections.Generic.IEnumerable<int>? homeTeamScore_in, System.Collections.Generic.IEnumerable<int>? homeTeamScore_notIn, int? awayTeamScore_greaterThan, int? awayTeamScore_lessThan, int? awayTeamScore_greaterThanOrEqual, int? awayTeamScore_lessThanOrEqual, int? awayTeamScore_equals, int? awayTeamScore_notEquals, bool? awayTeamScore_specified, System.Collections.Generic.IEnumerable<int>? awayTeamScore_in, System.Collections.Generic.IEnumerable<int>? awayTeamScore_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, long? homeTeamId_greaterThan, long? homeTeamId_lessThan, long? homeTeamId_greaterThanOrEqual, long? homeTeamId_lessThanOrEqual, long? homeTeamId_equals, long? homeTeamId_notEquals, bool? homeTeamId_specified, System.Collections.Generic.IEnumerable<long>? homeTeamId_in, System.Collections.Generic.IEnumerable<long>? homeTeamId_notIn, long? awayTeamId_greaterThan, long? awayTeamId_lessThan, long? awayTeamId_greaterThanOrEqual, long? awayTeamId_lessThanOrEqual, long? awayTeamId_equals, long? awayTeamId_notEquals, bool? awayTeamId_specified, System.Collections.Generic.IEnumerable<long>? awayTeamId_in, System.Collections.Generic.IEnumerable<long>? awayTeamId_notIn, long? predictionId_greaterThan, long? predictionId_lessThan, long? predictionId_greaterThanOrEqual, long? predictionId_lessThanOrEqual, long? predictionId_equals, long? predictionId_notEquals, bool? predictionId_specified, System.Collections.Generic.IEnumerable<long>? predictionId_in, System.Collections.Generic.IEnumerable<long>? predictionId_notIn, bool? distinct, int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/matches"
                    urlBuilder_.Append("api/matches");
                    urlBuilder_.Append('?');
                    if (id_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_in != null)
                    {
                        foreach (var item_ in id_in) { urlBuilder_.Append(System.Uri.EscapeDataString("id.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (id_notIn != null)
                    {
                        foreach (var item_ in id_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("id.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (date_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(date_greaterThan.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.lessThan")).Append('=').Append(System.Uri.EscapeDataString(date_lessThan.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(date_greaterThanOrEqual.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(date_lessThanOrEqual.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.equals")).Append('=').Append(System.Uri.EscapeDataString(date_equals.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.notEquals")).Append('=').Append(System.Uri.EscapeDataString(date_notEquals.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(date_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_in != null)
                    {
                        foreach (var item_ in date_in) { urlBuilder_.Append(System.Uri.EscapeDataString("date.in")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (date_notIn != null)
                    {
                        foreach (var item_ in date_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("date.notIn")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (homeTeamScore_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_in != null)
                    {
                        foreach (var item_ in homeTeamScore_in) { urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (homeTeamScore_notIn != null)
                    {
                        foreach (var item_ in homeTeamScore_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (awayTeamScore_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_in != null)
                    {
                        foreach (var item_ in awayTeamScore_in) { urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (awayTeamScore_notIn != null)
                    {
                        foreach (var item_ in awayTeamScore_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_in != null)
                    {
                        foreach (var item_ in tournamentId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_notIn != null)
                    {
                        foreach (var item_ in tournamentId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (homeTeamId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_in != null)
                    {
                        foreach (var item_ in homeTeamId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (homeTeamId_notIn != null)
                    {
                        foreach (var item_ in homeTeamId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (awayTeamId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_in != null)
                    {
                        foreach (var item_ in awayTeamId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (awayTeamId_notIn != null)
                    {
                        foreach (var item_ in awayTeamId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (predictionId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_in != null)
                    {
                        foreach (var item_ in predictionId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (predictionId_notIn != null)
                    {
                        foreach (var item_ in predictionId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (distinct != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("distinct")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(distinct, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                        foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MatchDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MatchDTO> MatchesPostAsync(MatchDTO body)
        {
            return MatchesPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MatchDTO> MatchesPostAsync(MatchDTO body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/matches"
                    urlBuilder_.Append("api/matches");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MatchDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Authority>> AuthoritiesGetAsync()
        {
            return AuthoritiesGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Authority>> AuthoritiesGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/authorities"
                    urlBuilder_.Append("api/authorities");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Authority>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Authority> AuthoritiesPostAsync(Authority body)
        {
            return AuthoritiesPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Authority> AuthoritiesPostAsync(Authority body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/authorities"
                    urlBuilder_.Append("api/authorities");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Authority>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> AuthenticateGetAsync()
        {
            return AuthenticateGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> AuthenticateGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/authenticate"
                    urlBuilder_.Append("api/authenticate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<JWTToken> AuthenticatePostAsync(LoginVM body)
        {
            return AuthenticatePostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<JWTToken> AuthenticatePostAsync(LoginVM body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/authenticate"
                    urlBuilder_.Append("api/authenticate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JWTToken>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AppUserDTO>> AppUsersGetAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, long? userId_greaterThan, long? userId_lessThan, long? userId_greaterThanOrEqual, long? userId_lessThanOrEqual, long? userId_equals, long? userId_notEquals, bool? userId_specified, System.Collections.Generic.IEnumerable<long>? userId_in, System.Collections.Generic.IEnumerable<long>? userId_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, bool? distinct, int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort)
        {
            return AppUsersGetAsync(id_greaterThan, id_lessThan, id_greaterThanOrEqual, id_lessThanOrEqual, id_equals, id_notEquals, id_specified, id_in, id_notIn, userId_greaterThan, userId_lessThan, userId_greaterThanOrEqual, userId_lessThanOrEqual, userId_equals, userId_notEquals, userId_specified, userId_in, userId_notIn, tournamentId_greaterThan, tournamentId_lessThan, tournamentId_greaterThanOrEqual, tournamentId_lessThanOrEqual, tournamentId_equals, tournamentId_notEquals, tournamentId_specified, tournamentId_in, tournamentId_notIn, distinct, page, size, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AppUserDTO>> AppUsersGetAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, long? userId_greaterThan, long? userId_lessThan, long? userId_greaterThanOrEqual, long? userId_lessThanOrEqual, long? userId_equals, long? userId_notEquals, bool? userId_specified, System.Collections.Generic.IEnumerable<long>? userId_in, System.Collections.Generic.IEnumerable<long>? userId_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, bool? distinct, int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/app-users"
                    urlBuilder_.Append("api/app-users");
                    urlBuilder_.Append('?');
                    if (id_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_in != null)
                    {
                        foreach (var item_ in id_in) { urlBuilder_.Append(System.Uri.EscapeDataString("id.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (id_notIn != null)
                    {
                        foreach (var item_ in id_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("id.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (userId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_in != null)
                    {
                        foreach (var item_ in userId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("userId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (userId_notIn != null)
                    {
                        foreach (var item_ in userId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("userId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_in != null)
                    {
                        foreach (var item_ in tournamentId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_notIn != null)
                    {
                        foreach (var item_ in tournamentId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (distinct != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("distinct")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(distinct, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                        foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AppUserDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AppUserDTO> AppUsersPostAsync(AppUserDTO body)
        {
            return AppUsersPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AppUserDTO> AppUsersPostAsync(AppUserDTO body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/app-users"
                    urlBuilder_.Append("api/app-users");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AppUserDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AdminUserDTO> AccountGetAsync()
        {
            return AccountGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AdminUserDTO> AccountGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/account"
                    urlBuilder_.Append("api/account");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdminUserDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AccountPostAsync(AdminUserDTO body)
        {
            return AccountPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AccountPostAsync(AdminUserDTO body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/account"
                    urlBuilder_.Append("api/account");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserDTO>> UsersAsync(int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort)
        {
            return UsersAsync(page, size, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserDTO>> UsersAsync(int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/users"
                    urlBuilder_.Append("api/users");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                        foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Authority> AuthoritiesGetAsync(string id)
        {
            return AuthoritiesGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Authority> AuthoritiesGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/authorities/{id}"
                    urlBuilder_.Append("api/authorities/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Authority>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AuthoritiesDeleteAsync(string id)
        {
            return AuthoritiesDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AuthoritiesDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/authorities/{id}"
                    urlBuilder_.Append("api/authorities/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ActivateAsync(string key)
        {
            return ActivateAsync(key, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ActivateAsync(string key, System.Threading.CancellationToken cancellationToken)
        {
            if (key == null)
                throw new System.ArgumentNullException("key");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/activate"
                    urlBuilder_.Append("api/activate");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("key")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAdminClient
    {
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdminUserDTO> UsersGetAsync(string login);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdminUserDTO> UsersGetAsync(string login, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdminUserDTO> UsersPutAsync(string login, AdminUserDTO body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdminUserDTO> UsersPutAsync(string login, AdminUserDTO body, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UsersDeleteAsync(string login);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UsersDeleteAsync(string login, System.Threading.CancellationToken cancellationToken);

        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AdminUserDTO>> UsersGetAsync(int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AdminUserDTO>> UsersGetAsync(int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdminUserDTO> UsersPutAsync(AdminUserDTO body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdminUserDTO> UsersPutAsync(AdminUserDTO body, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> UsersPostAsync(AdminUserDTO body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> UsersPostAsync(AdminUserDTO body, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdminClient : IAdminClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public AdminClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://pencapp-0848c949be13.herokuapp.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All };
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AdminUserDTO> UsersGetAsync(string login)
        {
            return UsersGetAsync(login, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AdminUserDTO> UsersGetAsync(string login, System.Threading.CancellationToken cancellationToken)
        {
            if (login == null)
                throw new System.ArgumentNullException("login");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/admin/users/{login}"
                    urlBuilder_.Append("api/admin/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(login, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdminUserDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AdminUserDTO> UsersPutAsync(string login, AdminUserDTO body)
        {
            return UsersPutAsync(login, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AdminUserDTO> UsersPutAsync(string login, AdminUserDTO body, System.Threading.CancellationToken cancellationToken)
        {
            if (login == null)
                throw new System.ArgumentNullException("login");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/admin/users/{login}"
                    urlBuilder_.Append("api/admin/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(login, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdminUserDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UsersDeleteAsync(string login)
        {
            return UsersDeleteAsync(login, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UsersDeleteAsync(string login, System.Threading.CancellationToken cancellationToken)
        {
            if (login == null)
                throw new System.ArgumentNullException("login");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/admin/users/{login}"
                    urlBuilder_.Append("api/admin/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(login, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AdminUserDTO>> UsersGetAsync(int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort)
        {
            return UsersGetAsync(page, size, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AdminUserDTO>> UsersGetAsync(int? page, int? size, System.Collections.Generic.IEnumerable<string>? sort, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/admin/users"
                    urlBuilder_.Append("api/admin/users");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                        foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AdminUserDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AdminUserDTO> UsersPutAsync(AdminUserDTO body)
        {
            return UsersPutAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AdminUserDTO> UsersPutAsync(AdminUserDTO body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/admin/users"
                    urlBuilder_.Append("api/admin/users");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdminUserDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<User> UsersPostAsync(AdminUserDTO body)
        {
            return UsersPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<User> UsersPostAsync(AdminUserDTO body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/admin/users"
                    urlBuilder_.Append("api/admin/users");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<User>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IResetPasswordClient
    {
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task InitAsync(string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task InitAsync(string body, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FinishAsync(KeyAndPasswordVM body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FinishAsync(KeyAndPasswordVM body, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResetPasswordClient : IResetPasswordClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public ResetPasswordClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://pencapp-0848c949be13.herokuapp.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All };
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task InitAsync(string body)
        {
            return InitAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task InitAsync(string body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/account/reset-password/init"
                    urlBuilder_.Append("api/account/reset-password/init");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task FinishAsync(KeyAndPasswordVM body)
        {
            return FinishAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FinishAsync(KeyAndPasswordVM body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/account/reset-password/finish"
                    urlBuilder_.Append("api/account/reset-password/finish");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAccountClient
    {
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ChangePasswordAsync(PasswordChangeDTO body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ChangePasswordAsync(PasswordChangeDTO body, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountClient : IAccountClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public AccountClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://pencapp-0848c949be13.herokuapp.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All };
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ChangePasswordAsync(PasswordChangeDTO body)
        {
            return ChangePasswordAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ChangePasswordAsync(PasswordChangeDTO body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/account/change-password"
                    urlBuilder_.Append("api/account/change-password");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITournamentsClient
    {
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> CountAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, string? name_contains, string? name_doesNotContain, string? name_equals, string? name_notEquals, bool? name_specified, System.Collections.Generic.IEnumerable<string>? name_in, System.Collections.Generic.IEnumerable<string>? name_notIn, System.DateTimeOffset? startDate_greaterThan, System.DateTimeOffset? startDate_lessThan, System.DateTimeOffset? startDate_greaterThanOrEqual, System.DateTimeOffset? startDate_lessThanOrEqual, System.DateTimeOffset? startDate_equals, System.DateTimeOffset? startDate_notEquals, bool? startDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_notIn, System.DateTimeOffset? endDate_greaterThan, System.DateTimeOffset? endDate_lessThan, System.DateTimeOffset? endDate_greaterThanOrEqual, System.DateTimeOffset? endDate_lessThanOrEqual, System.DateTimeOffset? endDate_equals, System.DateTimeOffset? endDate_notEquals, bool? endDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_notIn, long? teamId_greaterThan, long? teamId_lessThan, long? teamId_greaterThanOrEqual, long? teamId_lessThanOrEqual, long? teamId_equals, long? teamId_notEquals, bool? teamId_specified, System.Collections.Generic.IEnumerable<long>? teamId_in, System.Collections.Generic.IEnumerable<long>? teamId_notIn, long? pencaId_greaterThan, long? pencaId_lessThan, long? pencaId_greaterThanOrEqual, long? pencaId_lessThanOrEqual, long? pencaId_equals, long? pencaId_notEquals, bool? pencaId_specified, System.Collections.Generic.IEnumerable<long>? pencaId_in, System.Collections.Generic.IEnumerable<long>? pencaId_notIn, long? matchId_greaterThan, long? matchId_lessThan, long? matchId_greaterThanOrEqual, long? matchId_lessThanOrEqual, long? matchId_equals, long? matchId_notEquals, bool? matchId_specified, System.Collections.Generic.IEnumerable<long>? matchId_in, System.Collections.Generic.IEnumerable<long>? matchId_notIn, long? appUserId_greaterThan, long? appUserId_lessThan, long? appUserId_greaterThanOrEqual, long? appUserId_lessThanOrEqual, long? appUserId_equals, long? appUserId_notEquals, bool? appUserId_specified, System.Collections.Generic.IEnumerable<long>? appUserId_in, System.Collections.Generic.IEnumerable<long>? appUserId_notIn, bool? distinct);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> CountAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, string? name_contains, string? name_doesNotContain, string? name_equals, string? name_notEquals, bool? name_specified, System.Collections.Generic.IEnumerable<string>? name_in, System.Collections.Generic.IEnumerable<string>? name_notIn, System.DateTimeOffset? startDate_greaterThan, System.DateTimeOffset? startDate_lessThan, System.DateTimeOffset? startDate_greaterThanOrEqual, System.DateTimeOffset? startDate_lessThanOrEqual, System.DateTimeOffset? startDate_equals, System.DateTimeOffset? startDate_notEquals, bool? startDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_notIn, System.DateTimeOffset? endDate_greaterThan, System.DateTimeOffset? endDate_lessThan, System.DateTimeOffset? endDate_greaterThanOrEqual, System.DateTimeOffset? endDate_lessThanOrEqual, System.DateTimeOffset? endDate_equals, System.DateTimeOffset? endDate_notEquals, bool? endDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_notIn, long? teamId_greaterThan, long? teamId_lessThan, long? teamId_greaterThanOrEqual, long? teamId_lessThanOrEqual, long? teamId_equals, long? teamId_notEquals, bool? teamId_specified, System.Collections.Generic.IEnumerable<long>? teamId_in, System.Collections.Generic.IEnumerable<long>? teamId_notIn, long? pencaId_greaterThan, long? pencaId_lessThan, long? pencaId_greaterThanOrEqual, long? pencaId_lessThanOrEqual, long? pencaId_equals, long? pencaId_notEquals, bool? pencaId_specified, System.Collections.Generic.IEnumerable<long>? pencaId_in, System.Collections.Generic.IEnumerable<long>? pencaId_notIn, long? matchId_greaterThan, long? matchId_lessThan, long? matchId_greaterThanOrEqual, long? matchId_lessThanOrEqual, long? matchId_equals, long? matchId_notEquals, bool? matchId_specified, System.Collections.Generic.IEnumerable<long>? matchId_in, System.Collections.Generic.IEnumerable<long>? matchId_notIn, long? appUserId_greaterThan, long? appUserId_lessThan, long? appUserId_greaterThanOrEqual, long? appUserId_lessThanOrEqual, long? appUserId_equals, long? appUserId_notEquals, bool? appUserId_specified, System.Collections.Generic.IEnumerable<long>? appUserId_in, System.Collections.Generic.IEnumerable<long>? appUserId_notIn, bool? distinct, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TournamentsClient : ITournamentsClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public TournamentsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://pencapp-0848c949be13.herokuapp.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All };
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<long> CountAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, string? name_contains, string? name_doesNotContain, string? name_equals, string? name_notEquals, bool? name_specified, System.Collections.Generic.IEnumerable<string>? name_in, System.Collections.Generic.IEnumerable<string>? name_notIn, System.DateTimeOffset? startDate_greaterThan, System.DateTimeOffset? startDate_lessThan, System.DateTimeOffset? startDate_greaterThanOrEqual, System.DateTimeOffset? startDate_lessThanOrEqual, System.DateTimeOffset? startDate_equals, System.DateTimeOffset? startDate_notEquals, bool? startDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_notIn, System.DateTimeOffset? endDate_greaterThan, System.DateTimeOffset? endDate_lessThan, System.DateTimeOffset? endDate_greaterThanOrEqual, System.DateTimeOffset? endDate_lessThanOrEqual, System.DateTimeOffset? endDate_equals, System.DateTimeOffset? endDate_notEquals, bool? endDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_notIn, long? teamId_greaterThan, long? teamId_lessThan, long? teamId_greaterThanOrEqual, long? teamId_lessThanOrEqual, long? teamId_equals, long? teamId_notEquals, bool? teamId_specified, System.Collections.Generic.IEnumerable<long>? teamId_in, System.Collections.Generic.IEnumerable<long>? teamId_notIn, long? pencaId_greaterThan, long? pencaId_lessThan, long? pencaId_greaterThanOrEqual, long? pencaId_lessThanOrEqual, long? pencaId_equals, long? pencaId_notEquals, bool? pencaId_specified, System.Collections.Generic.IEnumerable<long>? pencaId_in, System.Collections.Generic.IEnumerable<long>? pencaId_notIn, long? matchId_greaterThan, long? matchId_lessThan, long? matchId_greaterThanOrEqual, long? matchId_lessThanOrEqual, long? matchId_equals, long? matchId_notEquals, bool? matchId_specified, System.Collections.Generic.IEnumerable<long>? matchId_in, System.Collections.Generic.IEnumerable<long>? matchId_notIn, long? appUserId_greaterThan, long? appUserId_lessThan, long? appUserId_greaterThanOrEqual, long? appUserId_lessThanOrEqual, long? appUserId_equals, long? appUserId_notEquals, bool? appUserId_specified, System.Collections.Generic.IEnumerable<long>? appUserId_in, System.Collections.Generic.IEnumerable<long>? appUserId_notIn, bool? distinct)
        {
            return CountAsync(id_greaterThan, id_lessThan, id_greaterThanOrEqual, id_lessThanOrEqual, id_equals, id_notEquals, id_specified, id_in, id_notIn, name_contains, name_doesNotContain, name_equals, name_notEquals, name_specified, name_in, name_notIn, startDate_greaterThan, startDate_lessThan, startDate_greaterThanOrEqual, startDate_lessThanOrEqual, startDate_equals, startDate_notEquals, startDate_specified, startDate_in, startDate_notIn, endDate_greaterThan, endDate_lessThan, endDate_greaterThanOrEqual, endDate_lessThanOrEqual, endDate_equals, endDate_notEquals, endDate_specified, endDate_in, endDate_notIn, teamId_greaterThan, teamId_lessThan, teamId_greaterThanOrEqual, teamId_lessThanOrEqual, teamId_equals, teamId_notEquals, teamId_specified, teamId_in, teamId_notIn, pencaId_greaterThan, pencaId_lessThan, pencaId_greaterThanOrEqual, pencaId_lessThanOrEqual, pencaId_equals, pencaId_notEquals, pencaId_specified, pencaId_in, pencaId_notIn, matchId_greaterThan, matchId_lessThan, matchId_greaterThanOrEqual, matchId_lessThanOrEqual, matchId_equals, matchId_notEquals, matchId_specified, matchId_in, matchId_notIn, appUserId_greaterThan, appUserId_lessThan, appUserId_greaterThanOrEqual, appUserId_lessThanOrEqual, appUserId_equals, appUserId_notEquals, appUserId_specified, appUserId_in, appUserId_notIn, distinct, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<long> CountAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, string? name_contains, string? name_doesNotContain, string? name_equals, string? name_notEquals, bool? name_specified, System.Collections.Generic.IEnumerable<string>? name_in, System.Collections.Generic.IEnumerable<string>? name_notIn, System.DateTimeOffset? startDate_greaterThan, System.DateTimeOffset? startDate_lessThan, System.DateTimeOffset? startDate_greaterThanOrEqual, System.DateTimeOffset? startDate_lessThanOrEqual, System.DateTimeOffset? startDate_equals, System.DateTimeOffset? startDate_notEquals, bool? startDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_notIn, System.DateTimeOffset? endDate_greaterThan, System.DateTimeOffset? endDate_lessThan, System.DateTimeOffset? endDate_greaterThanOrEqual, System.DateTimeOffset? endDate_lessThanOrEqual, System.DateTimeOffset? endDate_equals, System.DateTimeOffset? endDate_notEquals, bool? endDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_notIn, long? teamId_greaterThan, long? teamId_lessThan, long? teamId_greaterThanOrEqual, long? teamId_lessThanOrEqual, long? teamId_equals, long? teamId_notEquals, bool? teamId_specified, System.Collections.Generic.IEnumerable<long>? teamId_in, System.Collections.Generic.IEnumerable<long>? teamId_notIn, long? pencaId_greaterThan, long? pencaId_lessThan, long? pencaId_greaterThanOrEqual, long? pencaId_lessThanOrEqual, long? pencaId_equals, long? pencaId_notEquals, bool? pencaId_specified, System.Collections.Generic.IEnumerable<long>? pencaId_in, System.Collections.Generic.IEnumerable<long>? pencaId_notIn, long? matchId_greaterThan, long? matchId_lessThan, long? matchId_greaterThanOrEqual, long? matchId_lessThanOrEqual, long? matchId_equals, long? matchId_notEquals, bool? matchId_specified, System.Collections.Generic.IEnumerable<long>? matchId_in, System.Collections.Generic.IEnumerable<long>? matchId_notIn, long? appUserId_greaterThan, long? appUserId_lessThan, long? appUserId_greaterThanOrEqual, long? appUserId_lessThanOrEqual, long? appUserId_equals, long? appUserId_notEquals, bool? appUserId_specified, System.Collections.Generic.IEnumerable<long>? appUserId_in, System.Collections.Generic.IEnumerable<long>? appUserId_notIn, bool? distinct, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/tournaments/count"
                    urlBuilder_.Append("api/tournaments/count");
                    urlBuilder_.Append('?');
                    if (id_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_in != null)
                    {
                        foreach (var item_ in id_in) { urlBuilder_.Append(System.Uri.EscapeDataString("id.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (id_notIn != null)
                    {
                        foreach (var item_ in id_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("id.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (name_contains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.contains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_contains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_doesNotContain != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.doesNotContain")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_doesNotContain, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_in != null)
                    {
                        foreach (var item_ in name_in) { urlBuilder_.Append(System.Uri.EscapeDataString("name.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (name_notIn != null)
                    {
                        foreach (var item_ in name_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("name.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (startDate_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(startDate_greaterThan.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.lessThan")).Append('=').Append(System.Uri.EscapeDataString(startDate_lessThan.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(startDate_greaterThanOrEqual.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(startDate_lessThanOrEqual.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.equals")).Append('=').Append(System.Uri.EscapeDataString(startDate_equals.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.notEquals")).Append('=').Append(System.Uri.EscapeDataString(startDate_notEquals.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startDate_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_in != null)
                    {
                        foreach (var item_ in startDate_in) { urlBuilder_.Append(System.Uri.EscapeDataString("startDate.in")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (startDate_notIn != null)
                    {
                        foreach (var item_ in startDate_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("startDate.notIn")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (endDate_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(endDate_greaterThan.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.lessThan")).Append('=').Append(System.Uri.EscapeDataString(endDate_lessThan.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(endDate_greaterThanOrEqual.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(endDate_lessThanOrEqual.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.equals")).Append('=').Append(System.Uri.EscapeDataString(endDate_equals.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.notEquals")).Append('=').Append(System.Uri.EscapeDataString(endDate_notEquals.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(endDate_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_in != null)
                    {
                        foreach (var item_ in endDate_in) { urlBuilder_.Append(System.Uri.EscapeDataString("endDate.in")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (endDate_notIn != null)
                    {
                        foreach (var item_ in endDate_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("endDate.notIn")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (teamId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_in != null)
                    {
                        foreach (var item_ in teamId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("teamId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (teamId_notIn != null)
                    {
                        foreach (var item_ in teamId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("teamId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pencaId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_in != null)
                    {
                        foreach (var item_ in pencaId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pencaId_notIn != null)
                    {
                        foreach (var item_ in pencaId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (matchId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_in != null)
                    {
                        foreach (var item_ in matchId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("matchId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (matchId_notIn != null)
                    {
                        foreach (var item_ in matchId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("matchId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (appUserId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_in != null)
                    {
                        foreach (var item_ in appUserId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (appUserId_notIn != null)
                    {
                        foreach (var item_ in appUserId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (distinct != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("distinct")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(distinct, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<long>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITeamsClient
    {
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> CountAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, string? name_contains, string? name_doesNotContain, string? name_equals, string? name_notEquals, bool? name_specified, System.Collections.Generic.IEnumerable<string>? name_in, System.Collections.Generic.IEnumerable<string>? name_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, bool? distinct);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> CountAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, string? name_contains, string? name_doesNotContain, string? name_equals, string? name_notEquals, bool? name_specified, System.Collections.Generic.IEnumerable<string>? name_in, System.Collections.Generic.IEnumerable<string>? name_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, bool? distinct, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TeamsClient : ITeamsClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public TeamsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://pencapp-0848c949be13.herokuapp.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All };
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<long> CountAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, string? name_contains, string? name_doesNotContain, string? name_equals, string? name_notEquals, bool? name_specified, System.Collections.Generic.IEnumerable<string>? name_in, System.Collections.Generic.IEnumerable<string>? name_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, bool? distinct)
        {
            return CountAsync(id_greaterThan, id_lessThan, id_greaterThanOrEqual, id_lessThanOrEqual, id_equals, id_notEquals, id_specified, id_in, id_notIn, name_contains, name_doesNotContain, name_equals, name_notEquals, name_specified, name_in, name_notIn, tournamentId_greaterThan, tournamentId_lessThan, tournamentId_greaterThanOrEqual, tournamentId_lessThanOrEqual, tournamentId_equals, tournamentId_notEquals, tournamentId_specified, tournamentId_in, tournamentId_notIn, distinct, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<long> CountAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, string? name_contains, string? name_doesNotContain, string? name_equals, string? name_notEquals, bool? name_specified, System.Collections.Generic.IEnumerable<string>? name_in, System.Collections.Generic.IEnumerable<string>? name_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, bool? distinct, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/teams/count"
                    urlBuilder_.Append("api/teams/count");
                    urlBuilder_.Append('?');
                    if (id_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_in != null)
                    {
                        foreach (var item_ in id_in) { urlBuilder_.Append(System.Uri.EscapeDataString("id.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (id_notIn != null)
                    {
                        foreach (var item_ in id_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("id.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (name_contains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.contains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_contains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_doesNotContain != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.doesNotContain")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_doesNotContain, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_in != null)
                    {
                        foreach (var item_ in name_in) { urlBuilder_.Append(System.Uri.EscapeDataString("name.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (name_notIn != null)
                    {
                        foreach (var item_ in name_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("name.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_in != null)
                    {
                        foreach (var item_ in tournamentId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_notIn != null)
                    {
                        foreach (var item_ in tournamentId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (distinct != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("distinct")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(distinct, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<long>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPredictionsClient
    {
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> CountAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, int? homeTeamScore_greaterThan, int? homeTeamScore_lessThan, int? homeTeamScore_greaterThanOrEqual, int? homeTeamScore_lessThanOrEqual, int? homeTeamScore_equals, int? homeTeamScore_notEquals, bool? homeTeamScore_specified, System.Collections.Generic.IEnumerable<int>? homeTeamScore_in, System.Collections.Generic.IEnumerable<int>? homeTeamScore_notIn, int? awayTeamScore_greaterThan, int? awayTeamScore_lessThan, int? awayTeamScore_greaterThanOrEqual, int? awayTeamScore_lessThanOrEqual, int? awayTeamScore_equals, int? awayTeamScore_notEquals, bool? awayTeamScore_specified, System.Collections.Generic.IEnumerable<int>? awayTeamScore_in, System.Collections.Generic.IEnumerable<int>? awayTeamScore_notIn, int? points_greaterThan, int? points_lessThan, int? points_greaterThanOrEqual, int? points_lessThanOrEqual, int? points_equals, int? points_notEquals, bool? points_specified, System.Collections.Generic.IEnumerable<int>? points_in, System.Collections.Generic.IEnumerable<int>? points_notIn, long? matchId_greaterThan, long? matchId_lessThan, long? matchId_greaterThanOrEqual, long? matchId_lessThanOrEqual, long? matchId_equals, long? matchId_notEquals, bool? matchId_specified, System.Collections.Generic.IEnumerable<long>? matchId_in, System.Collections.Generic.IEnumerable<long>? matchId_notIn, long? pencaId_greaterThan, long? pencaId_lessThan, long? pencaId_greaterThanOrEqual, long? pencaId_lessThanOrEqual, long? pencaId_equals, long? pencaId_notEquals, bool? pencaId_specified, System.Collections.Generic.IEnumerable<long>? pencaId_in, System.Collections.Generic.IEnumerable<long>? pencaId_notIn, long? userId_greaterThan, long? userId_lessThan, long? userId_greaterThanOrEqual, long? userId_lessThanOrEqual, long? userId_equals, long? userId_notEquals, bool? userId_specified, System.Collections.Generic.IEnumerable<long>? userId_in, System.Collections.Generic.IEnumerable<long>? userId_notIn, bool? distinct);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> CountAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, int? homeTeamScore_greaterThan, int? homeTeamScore_lessThan, int? homeTeamScore_greaterThanOrEqual, int? homeTeamScore_lessThanOrEqual, int? homeTeamScore_equals, int? homeTeamScore_notEquals, bool? homeTeamScore_specified, System.Collections.Generic.IEnumerable<int>? homeTeamScore_in, System.Collections.Generic.IEnumerable<int>? homeTeamScore_notIn, int? awayTeamScore_greaterThan, int? awayTeamScore_lessThan, int? awayTeamScore_greaterThanOrEqual, int? awayTeamScore_lessThanOrEqual, int? awayTeamScore_equals, int? awayTeamScore_notEquals, bool? awayTeamScore_specified, System.Collections.Generic.IEnumerable<int>? awayTeamScore_in, System.Collections.Generic.IEnumerable<int>? awayTeamScore_notIn, int? points_greaterThan, int? points_lessThan, int? points_greaterThanOrEqual, int? points_lessThanOrEqual, int? points_equals, int? points_notEquals, bool? points_specified, System.Collections.Generic.IEnumerable<int>? points_in, System.Collections.Generic.IEnumerable<int>? points_notIn, long? matchId_greaterThan, long? matchId_lessThan, long? matchId_greaterThanOrEqual, long? matchId_lessThanOrEqual, long? matchId_equals, long? matchId_notEquals, bool? matchId_specified, System.Collections.Generic.IEnumerable<long>? matchId_in, System.Collections.Generic.IEnumerable<long>? matchId_notIn, long? pencaId_greaterThan, long? pencaId_lessThan, long? pencaId_greaterThanOrEqual, long? pencaId_lessThanOrEqual, long? pencaId_equals, long? pencaId_notEquals, bool? pencaId_specified, System.Collections.Generic.IEnumerable<long>? pencaId_in, System.Collections.Generic.IEnumerable<long>? pencaId_notIn, long? userId_greaterThan, long? userId_lessThan, long? userId_greaterThanOrEqual, long? userId_lessThanOrEqual, long? userId_equals, long? userId_notEquals, bool? userId_specified, System.Collections.Generic.IEnumerable<long>? userId_in, System.Collections.Generic.IEnumerable<long>? userId_notIn, bool? distinct, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PredictionsClient : IPredictionsClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public PredictionsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://pencapp-0848c949be13.herokuapp.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All };
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<long> CountAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, int? homeTeamScore_greaterThan, int? homeTeamScore_lessThan, int? homeTeamScore_greaterThanOrEqual, int? homeTeamScore_lessThanOrEqual, int? homeTeamScore_equals, int? homeTeamScore_notEquals, bool? homeTeamScore_specified, System.Collections.Generic.IEnumerable<int>? homeTeamScore_in, System.Collections.Generic.IEnumerable<int>? homeTeamScore_notIn, int? awayTeamScore_greaterThan, int? awayTeamScore_lessThan, int? awayTeamScore_greaterThanOrEqual, int? awayTeamScore_lessThanOrEqual, int? awayTeamScore_equals, int? awayTeamScore_notEquals, bool? awayTeamScore_specified, System.Collections.Generic.IEnumerable<int>? awayTeamScore_in, System.Collections.Generic.IEnumerable<int>? awayTeamScore_notIn, int? points_greaterThan, int? points_lessThan, int? points_greaterThanOrEqual, int? points_lessThanOrEqual, int? points_equals, int? points_notEquals, bool? points_specified, System.Collections.Generic.IEnumerable<int>? points_in, System.Collections.Generic.IEnumerable<int>? points_notIn, long? matchId_greaterThan, long? matchId_lessThan, long? matchId_greaterThanOrEqual, long? matchId_lessThanOrEqual, long? matchId_equals, long? matchId_notEquals, bool? matchId_specified, System.Collections.Generic.IEnumerable<long>? matchId_in, System.Collections.Generic.IEnumerable<long>? matchId_notIn, long? pencaId_greaterThan, long? pencaId_lessThan, long? pencaId_greaterThanOrEqual, long? pencaId_lessThanOrEqual, long? pencaId_equals, long? pencaId_notEquals, bool? pencaId_specified, System.Collections.Generic.IEnumerable<long>? pencaId_in, System.Collections.Generic.IEnumerable<long>? pencaId_notIn, long? userId_greaterThan, long? userId_lessThan, long? userId_greaterThanOrEqual, long? userId_lessThanOrEqual, long? userId_equals, long? userId_notEquals, bool? userId_specified, System.Collections.Generic.IEnumerable<long>? userId_in, System.Collections.Generic.IEnumerable<long>? userId_notIn, bool? distinct)
        {
            return CountAsync(id_greaterThan, id_lessThan, id_greaterThanOrEqual, id_lessThanOrEqual, id_equals, id_notEquals, id_specified, id_in, id_notIn, homeTeamScore_greaterThan, homeTeamScore_lessThan, homeTeamScore_greaterThanOrEqual, homeTeamScore_lessThanOrEqual, homeTeamScore_equals, homeTeamScore_notEquals, homeTeamScore_specified, homeTeamScore_in, homeTeamScore_notIn, awayTeamScore_greaterThan, awayTeamScore_lessThan, awayTeamScore_greaterThanOrEqual, awayTeamScore_lessThanOrEqual, awayTeamScore_equals, awayTeamScore_notEquals, awayTeamScore_specified, awayTeamScore_in, awayTeamScore_notIn, points_greaterThan, points_lessThan, points_greaterThanOrEqual, points_lessThanOrEqual, points_equals, points_notEquals, points_specified, points_in, points_notIn, matchId_greaterThan, matchId_lessThan, matchId_greaterThanOrEqual, matchId_lessThanOrEqual, matchId_equals, matchId_notEquals, matchId_specified, matchId_in, matchId_notIn, pencaId_greaterThan, pencaId_lessThan, pencaId_greaterThanOrEqual, pencaId_lessThanOrEqual, pencaId_equals, pencaId_notEquals, pencaId_specified, pencaId_in, pencaId_notIn, userId_greaterThan, userId_lessThan, userId_greaterThanOrEqual, userId_lessThanOrEqual, userId_equals, userId_notEquals, userId_specified, userId_in, userId_notIn, distinct, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<long> CountAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, int? homeTeamScore_greaterThan, int? homeTeamScore_lessThan, int? homeTeamScore_greaterThanOrEqual, int? homeTeamScore_lessThanOrEqual, int? homeTeamScore_equals, int? homeTeamScore_notEquals, bool? homeTeamScore_specified, System.Collections.Generic.IEnumerable<int>? homeTeamScore_in, System.Collections.Generic.IEnumerable<int>? homeTeamScore_notIn, int? awayTeamScore_greaterThan, int? awayTeamScore_lessThan, int? awayTeamScore_greaterThanOrEqual, int? awayTeamScore_lessThanOrEqual, int? awayTeamScore_equals, int? awayTeamScore_notEquals, bool? awayTeamScore_specified, System.Collections.Generic.IEnumerable<int>? awayTeamScore_in, System.Collections.Generic.IEnumerable<int>? awayTeamScore_notIn, int? points_greaterThan, int? points_lessThan, int? points_greaterThanOrEqual, int? points_lessThanOrEqual, int? points_equals, int? points_notEquals, bool? points_specified, System.Collections.Generic.IEnumerable<int>? points_in, System.Collections.Generic.IEnumerable<int>? points_notIn, long? matchId_greaterThan, long? matchId_lessThan, long? matchId_greaterThanOrEqual, long? matchId_lessThanOrEqual, long? matchId_equals, long? matchId_notEquals, bool? matchId_specified, System.Collections.Generic.IEnumerable<long>? matchId_in, System.Collections.Generic.IEnumerable<long>? matchId_notIn, long? pencaId_greaterThan, long? pencaId_lessThan, long? pencaId_greaterThanOrEqual, long? pencaId_lessThanOrEqual, long? pencaId_equals, long? pencaId_notEquals, bool? pencaId_specified, System.Collections.Generic.IEnumerable<long>? pencaId_in, System.Collections.Generic.IEnumerable<long>? pencaId_notIn, long? userId_greaterThan, long? userId_lessThan, long? userId_greaterThanOrEqual, long? userId_lessThanOrEqual, long? userId_equals, long? userId_notEquals, bool? userId_specified, System.Collections.Generic.IEnumerable<long>? userId_in, System.Collections.Generic.IEnumerable<long>? userId_notIn, bool? distinct, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/predictions/count"
                    urlBuilder_.Append("api/predictions/count");
                    urlBuilder_.Append('?');
                    if (id_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_in != null)
                    {
                        foreach (var item_ in id_in) { urlBuilder_.Append(System.Uri.EscapeDataString("id.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (id_notIn != null)
                    {
                        foreach (var item_ in id_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("id.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (homeTeamScore_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_in != null)
                    {
                        foreach (var item_ in homeTeamScore_in) { urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (homeTeamScore_notIn != null)
                    {
                        foreach (var item_ in homeTeamScore_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (awayTeamScore_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_in != null)
                    {
                        foreach (var item_ in awayTeamScore_in) { urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (awayTeamScore_notIn != null)
                    {
                        foreach (var item_ in awayTeamScore_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (points_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_in != null)
                    {
                        foreach (var item_ in points_in) { urlBuilder_.Append(System.Uri.EscapeDataString("points.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (points_notIn != null)
                    {
                        foreach (var item_ in points_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("points.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (matchId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_in != null)
                    {
                        foreach (var item_ in matchId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("matchId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (matchId_notIn != null)
                    {
                        foreach (var item_ in matchId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("matchId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pencaId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_in != null)
                    {
                        foreach (var item_ in pencaId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pencaId_notIn != null)
                    {
                        foreach (var item_ in pencaId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (userId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_in != null)
                    {
                        foreach (var item_ in userId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("userId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (userId_notIn != null)
                    {
                        foreach (var item_ in userId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("userId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (distinct != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("distinct")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(distinct, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<long>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPencasClient
    {
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> CountAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, string? name_contains, string? name_doesNotContain, string? name_equals, string? name_notEquals, bool? name_specified, System.Collections.Generic.IEnumerable<string>? name_in, System.Collections.Generic.IEnumerable<string>? name_notIn, System.DateTimeOffset? startDate_greaterThan, System.DateTimeOffset? startDate_lessThan, System.DateTimeOffset? startDate_greaterThanOrEqual, System.DateTimeOffset? startDate_lessThanOrEqual, System.DateTimeOffset? startDate_equals, System.DateTimeOffset? startDate_notEquals, bool? startDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_notIn, System.DateTimeOffset? endDate_greaterThan, System.DateTimeOffset? endDate_lessThan, System.DateTimeOffset? endDate_greaterThanOrEqual, System.DateTimeOffset? endDate_lessThanOrEqual, System.DateTimeOffset? endDate_equals, System.DateTimeOffset? endDate_notEquals, bool? endDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, long? predictionId_greaterThan, long? predictionId_lessThan, long? predictionId_greaterThanOrEqual, long? predictionId_lessThanOrEqual, long? predictionId_equals, long? predictionId_notEquals, bool? predictionId_specified, System.Collections.Generic.IEnumerable<long>? predictionId_in, System.Collections.Generic.IEnumerable<long>? predictionId_notIn, bool? distinct);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> CountAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, string? name_contains, string? name_doesNotContain, string? name_equals, string? name_notEquals, bool? name_specified, System.Collections.Generic.IEnumerable<string>? name_in, System.Collections.Generic.IEnumerable<string>? name_notIn, System.DateTimeOffset? startDate_greaterThan, System.DateTimeOffset? startDate_lessThan, System.DateTimeOffset? startDate_greaterThanOrEqual, System.DateTimeOffset? startDate_lessThanOrEqual, System.DateTimeOffset? startDate_equals, System.DateTimeOffset? startDate_notEquals, bool? startDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_notIn, System.DateTimeOffset? endDate_greaterThan, System.DateTimeOffset? endDate_lessThan, System.DateTimeOffset? endDate_greaterThanOrEqual, System.DateTimeOffset? endDate_lessThanOrEqual, System.DateTimeOffset? endDate_equals, System.DateTimeOffset? endDate_notEquals, bool? endDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, long? predictionId_greaterThan, long? predictionId_lessThan, long? predictionId_greaterThanOrEqual, long? predictionId_lessThanOrEqual, long? predictionId_equals, long? predictionId_notEquals, bool? predictionId_specified, System.Collections.Generic.IEnumerable<long>? predictionId_in, System.Collections.Generic.IEnumerable<long>? predictionId_notIn, bool? distinct, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PencasClient : IPencasClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public PencasClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://pencapp-0848c949be13.herokuapp.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All };
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<long> CountAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, string? name_contains, string? name_doesNotContain, string? name_equals, string? name_notEquals, bool? name_specified, System.Collections.Generic.IEnumerable<string>? name_in, System.Collections.Generic.IEnumerable<string>? name_notIn, System.DateTimeOffset? startDate_greaterThan, System.DateTimeOffset? startDate_lessThan, System.DateTimeOffset? startDate_greaterThanOrEqual, System.DateTimeOffset? startDate_lessThanOrEqual, System.DateTimeOffset? startDate_equals, System.DateTimeOffset? startDate_notEquals, bool? startDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_notIn, System.DateTimeOffset? endDate_greaterThan, System.DateTimeOffset? endDate_lessThan, System.DateTimeOffset? endDate_greaterThanOrEqual, System.DateTimeOffset? endDate_lessThanOrEqual, System.DateTimeOffset? endDate_equals, System.DateTimeOffset? endDate_notEquals, bool? endDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, long? predictionId_greaterThan, long? predictionId_lessThan, long? predictionId_greaterThanOrEqual, long? predictionId_lessThanOrEqual, long? predictionId_equals, long? predictionId_notEquals, bool? predictionId_specified, System.Collections.Generic.IEnumerable<long>? predictionId_in, System.Collections.Generic.IEnumerable<long>? predictionId_notIn, bool? distinct)
        {
            return CountAsync(id_greaterThan, id_lessThan, id_greaterThanOrEqual, id_lessThanOrEqual, id_equals, id_notEquals, id_specified, id_in, id_notIn, name_contains, name_doesNotContain, name_equals, name_notEquals, name_specified, name_in, name_notIn, startDate_greaterThan, startDate_lessThan, startDate_greaterThanOrEqual, startDate_lessThanOrEqual, startDate_equals, startDate_notEquals, startDate_specified, startDate_in, startDate_notIn, endDate_greaterThan, endDate_lessThan, endDate_greaterThanOrEqual, endDate_lessThanOrEqual, endDate_equals, endDate_notEquals, endDate_specified, endDate_in, endDate_notIn, tournamentId_greaterThan, tournamentId_lessThan, tournamentId_greaterThanOrEqual, tournamentId_lessThanOrEqual, tournamentId_equals, tournamentId_notEquals, tournamentId_specified, tournamentId_in, tournamentId_notIn, predictionId_greaterThan, predictionId_lessThan, predictionId_greaterThanOrEqual, predictionId_lessThanOrEqual, predictionId_equals, predictionId_notEquals, predictionId_specified, predictionId_in, predictionId_notIn, distinct, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<long> CountAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, string? name_contains, string? name_doesNotContain, string? name_equals, string? name_notEquals, bool? name_specified, System.Collections.Generic.IEnumerable<string>? name_in, System.Collections.Generic.IEnumerable<string>? name_notIn, System.DateTimeOffset? startDate_greaterThan, System.DateTimeOffset? startDate_lessThan, System.DateTimeOffset? startDate_greaterThanOrEqual, System.DateTimeOffset? startDate_lessThanOrEqual, System.DateTimeOffset? startDate_equals, System.DateTimeOffset? startDate_notEquals, bool? startDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? startDate_notIn, System.DateTimeOffset? endDate_greaterThan, System.DateTimeOffset? endDate_lessThan, System.DateTimeOffset? endDate_greaterThanOrEqual, System.DateTimeOffset? endDate_lessThanOrEqual, System.DateTimeOffset? endDate_equals, System.DateTimeOffset? endDate_notEquals, bool? endDate_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? endDate_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, long? predictionId_greaterThan, long? predictionId_lessThan, long? predictionId_greaterThanOrEqual, long? predictionId_lessThanOrEqual, long? predictionId_equals, long? predictionId_notEquals, bool? predictionId_specified, System.Collections.Generic.IEnumerable<long>? predictionId_in, System.Collections.Generic.IEnumerable<long>? predictionId_notIn, bool? distinct, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/pencas/count"
                    urlBuilder_.Append("api/pencas/count");
                    urlBuilder_.Append('?');
                    if (id_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_in != null)
                    {
                        foreach (var item_ in id_in) { urlBuilder_.Append(System.Uri.EscapeDataString("id.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (id_notIn != null)
                    {
                        foreach (var item_ in id_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("id.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (name_contains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.contains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_contains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_doesNotContain != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.doesNotContain")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_doesNotContain, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_in != null)
                    {
                        foreach (var item_ in name_in) { urlBuilder_.Append(System.Uri.EscapeDataString("name.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (name_notIn != null)
                    {
                        foreach (var item_ in name_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("name.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (startDate_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(startDate_greaterThan.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.lessThan")).Append('=').Append(System.Uri.EscapeDataString(startDate_lessThan.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(startDate_greaterThanOrEqual.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(startDate_lessThanOrEqual.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.equals")).Append('=').Append(System.Uri.EscapeDataString(startDate_equals.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.notEquals")).Append('=').Append(System.Uri.EscapeDataString(startDate_notEquals.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startDate_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_in != null)
                    {
                        foreach (var item_ in startDate_in) { urlBuilder_.Append(System.Uri.EscapeDataString("startDate.in")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (startDate_notIn != null)
                    {
                        foreach (var item_ in startDate_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("startDate.notIn")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (endDate_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(endDate_greaterThan.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.lessThan")).Append('=').Append(System.Uri.EscapeDataString(endDate_lessThan.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(endDate_greaterThanOrEqual.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(endDate_lessThanOrEqual.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.equals")).Append('=').Append(System.Uri.EscapeDataString(endDate_equals.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.notEquals")).Append('=').Append(System.Uri.EscapeDataString(endDate_notEquals.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(endDate_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_in != null)
                    {
                        foreach (var item_ in endDate_in) { urlBuilder_.Append(System.Uri.EscapeDataString("endDate.in")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (endDate_notIn != null)
                    {
                        foreach (var item_ in endDate_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("endDate.notIn")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_in != null)
                    {
                        foreach (var item_ in tournamentId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_notIn != null)
                    {
                        foreach (var item_ in tournamentId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (predictionId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_in != null)
                    {
                        foreach (var item_ in predictionId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (predictionId_notIn != null)
                    {
                        foreach (var item_ in predictionId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (distinct != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("distinct")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(distinct, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<long>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IMatchesClient
    {
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> CountAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, System.DateTimeOffset? date_greaterThan, System.DateTimeOffset? date_lessThan, System.DateTimeOffset? date_greaterThanOrEqual, System.DateTimeOffset? date_lessThanOrEqual, System.DateTimeOffset? date_equals, System.DateTimeOffset? date_notEquals, bool? date_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? date_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? date_notIn, int? homeTeamScore_greaterThan, int? homeTeamScore_lessThan, int? homeTeamScore_greaterThanOrEqual, int? homeTeamScore_lessThanOrEqual, int? homeTeamScore_equals, int? homeTeamScore_notEquals, bool? homeTeamScore_specified, System.Collections.Generic.IEnumerable<int>? homeTeamScore_in, System.Collections.Generic.IEnumerable<int>? homeTeamScore_notIn, int? awayTeamScore_greaterThan, int? awayTeamScore_lessThan, int? awayTeamScore_greaterThanOrEqual, int? awayTeamScore_lessThanOrEqual, int? awayTeamScore_equals, int? awayTeamScore_notEquals, bool? awayTeamScore_specified, System.Collections.Generic.IEnumerable<int>? awayTeamScore_in, System.Collections.Generic.IEnumerable<int>? awayTeamScore_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, long? homeTeamId_greaterThan, long? homeTeamId_lessThan, long? homeTeamId_greaterThanOrEqual, long? homeTeamId_lessThanOrEqual, long? homeTeamId_equals, long? homeTeamId_notEquals, bool? homeTeamId_specified, System.Collections.Generic.IEnumerable<long>? homeTeamId_in, System.Collections.Generic.IEnumerable<long>? homeTeamId_notIn, long? awayTeamId_greaterThan, long? awayTeamId_lessThan, long? awayTeamId_greaterThanOrEqual, long? awayTeamId_lessThanOrEqual, long? awayTeamId_equals, long? awayTeamId_notEquals, bool? awayTeamId_specified, System.Collections.Generic.IEnumerable<long>? awayTeamId_in, System.Collections.Generic.IEnumerable<long>? awayTeamId_notIn, long? predictionId_greaterThan, long? predictionId_lessThan, long? predictionId_greaterThanOrEqual, long? predictionId_lessThanOrEqual, long? predictionId_equals, long? predictionId_notEquals, bool? predictionId_specified, System.Collections.Generic.IEnumerable<long>? predictionId_in, System.Collections.Generic.IEnumerable<long>? predictionId_notIn, bool? distinct);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> CountAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, System.DateTimeOffset? date_greaterThan, System.DateTimeOffset? date_lessThan, System.DateTimeOffset? date_greaterThanOrEqual, System.DateTimeOffset? date_lessThanOrEqual, System.DateTimeOffset? date_equals, System.DateTimeOffset? date_notEquals, bool? date_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? date_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? date_notIn, int? homeTeamScore_greaterThan, int? homeTeamScore_lessThan, int? homeTeamScore_greaterThanOrEqual, int? homeTeamScore_lessThanOrEqual, int? homeTeamScore_equals, int? homeTeamScore_notEquals, bool? homeTeamScore_specified, System.Collections.Generic.IEnumerable<int>? homeTeamScore_in, System.Collections.Generic.IEnumerable<int>? homeTeamScore_notIn, int? awayTeamScore_greaterThan, int? awayTeamScore_lessThan, int? awayTeamScore_greaterThanOrEqual, int? awayTeamScore_lessThanOrEqual, int? awayTeamScore_equals, int? awayTeamScore_notEquals, bool? awayTeamScore_specified, System.Collections.Generic.IEnumerable<int>? awayTeamScore_in, System.Collections.Generic.IEnumerable<int>? awayTeamScore_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, long? homeTeamId_greaterThan, long? homeTeamId_lessThan, long? homeTeamId_greaterThanOrEqual, long? homeTeamId_lessThanOrEqual, long? homeTeamId_equals, long? homeTeamId_notEquals, bool? homeTeamId_specified, System.Collections.Generic.IEnumerable<long>? homeTeamId_in, System.Collections.Generic.IEnumerable<long>? homeTeamId_notIn, long? awayTeamId_greaterThan, long? awayTeamId_lessThan, long? awayTeamId_greaterThanOrEqual, long? awayTeamId_lessThanOrEqual, long? awayTeamId_equals, long? awayTeamId_notEquals, bool? awayTeamId_specified, System.Collections.Generic.IEnumerable<long>? awayTeamId_in, System.Collections.Generic.IEnumerable<long>? awayTeamId_notIn, long? predictionId_greaterThan, long? predictionId_lessThan, long? predictionId_greaterThanOrEqual, long? predictionId_lessThanOrEqual, long? predictionId_equals, long? predictionId_notEquals, bool? predictionId_specified, System.Collections.Generic.IEnumerable<long>? predictionId_in, System.Collections.Generic.IEnumerable<long>? predictionId_notIn, bool? distinct, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MatchesClient : IMatchesClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public MatchesClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://pencapp-0848c949be13.herokuapp.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All };
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<long> CountAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, System.DateTimeOffset? date_greaterThan, System.DateTimeOffset? date_lessThan, System.DateTimeOffset? date_greaterThanOrEqual, System.DateTimeOffset? date_lessThanOrEqual, System.DateTimeOffset? date_equals, System.DateTimeOffset? date_notEquals, bool? date_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? date_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? date_notIn, int? homeTeamScore_greaterThan, int? homeTeamScore_lessThan, int? homeTeamScore_greaterThanOrEqual, int? homeTeamScore_lessThanOrEqual, int? homeTeamScore_equals, int? homeTeamScore_notEquals, bool? homeTeamScore_specified, System.Collections.Generic.IEnumerable<int>? homeTeamScore_in, System.Collections.Generic.IEnumerable<int>? homeTeamScore_notIn, int? awayTeamScore_greaterThan, int? awayTeamScore_lessThan, int? awayTeamScore_greaterThanOrEqual, int? awayTeamScore_lessThanOrEqual, int? awayTeamScore_equals, int? awayTeamScore_notEquals, bool? awayTeamScore_specified, System.Collections.Generic.IEnumerable<int>? awayTeamScore_in, System.Collections.Generic.IEnumerable<int>? awayTeamScore_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, long? homeTeamId_greaterThan, long? homeTeamId_lessThan, long? homeTeamId_greaterThanOrEqual, long? homeTeamId_lessThanOrEqual, long? homeTeamId_equals, long? homeTeamId_notEquals, bool? homeTeamId_specified, System.Collections.Generic.IEnumerable<long>? homeTeamId_in, System.Collections.Generic.IEnumerable<long>? homeTeamId_notIn, long? awayTeamId_greaterThan, long? awayTeamId_lessThan, long? awayTeamId_greaterThanOrEqual, long? awayTeamId_lessThanOrEqual, long? awayTeamId_equals, long? awayTeamId_notEquals, bool? awayTeamId_specified, System.Collections.Generic.IEnumerable<long>? awayTeamId_in, System.Collections.Generic.IEnumerable<long>? awayTeamId_notIn, long? predictionId_greaterThan, long? predictionId_lessThan, long? predictionId_greaterThanOrEqual, long? predictionId_lessThanOrEqual, long? predictionId_equals, long? predictionId_notEquals, bool? predictionId_specified, System.Collections.Generic.IEnumerable<long>? predictionId_in, System.Collections.Generic.IEnumerable<long>? predictionId_notIn, bool? distinct)
        {
            return CountAsync(id_greaterThan, id_lessThan, id_greaterThanOrEqual, id_lessThanOrEqual, id_equals, id_notEquals, id_specified, id_in, id_notIn, date_greaterThan, date_lessThan, date_greaterThanOrEqual, date_lessThanOrEqual, date_equals, date_notEquals, date_specified, date_in, date_notIn, homeTeamScore_greaterThan, homeTeamScore_lessThan, homeTeamScore_greaterThanOrEqual, homeTeamScore_lessThanOrEqual, homeTeamScore_equals, homeTeamScore_notEquals, homeTeamScore_specified, homeTeamScore_in, homeTeamScore_notIn, awayTeamScore_greaterThan, awayTeamScore_lessThan, awayTeamScore_greaterThanOrEqual, awayTeamScore_lessThanOrEqual, awayTeamScore_equals, awayTeamScore_notEquals, awayTeamScore_specified, awayTeamScore_in, awayTeamScore_notIn, tournamentId_greaterThan, tournamentId_lessThan, tournamentId_greaterThanOrEqual, tournamentId_lessThanOrEqual, tournamentId_equals, tournamentId_notEquals, tournamentId_specified, tournamentId_in, tournamentId_notIn, homeTeamId_greaterThan, homeTeamId_lessThan, homeTeamId_greaterThanOrEqual, homeTeamId_lessThanOrEqual, homeTeamId_equals, homeTeamId_notEquals, homeTeamId_specified, homeTeamId_in, homeTeamId_notIn, awayTeamId_greaterThan, awayTeamId_lessThan, awayTeamId_greaterThanOrEqual, awayTeamId_lessThanOrEqual, awayTeamId_equals, awayTeamId_notEquals, awayTeamId_specified, awayTeamId_in, awayTeamId_notIn, predictionId_greaterThan, predictionId_lessThan, predictionId_greaterThanOrEqual, predictionId_lessThanOrEqual, predictionId_equals, predictionId_notEquals, predictionId_specified, predictionId_in, predictionId_notIn, distinct, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<long> CountAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, System.DateTimeOffset? date_greaterThan, System.DateTimeOffset? date_lessThan, System.DateTimeOffset? date_greaterThanOrEqual, System.DateTimeOffset? date_lessThanOrEqual, System.DateTimeOffset? date_equals, System.DateTimeOffset? date_notEquals, bool? date_specified, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? date_in, System.Collections.Generic.IEnumerable<System.DateTimeOffset>? date_notIn, int? homeTeamScore_greaterThan, int? homeTeamScore_lessThan, int? homeTeamScore_greaterThanOrEqual, int? homeTeamScore_lessThanOrEqual, int? homeTeamScore_equals, int? homeTeamScore_notEquals, bool? homeTeamScore_specified, System.Collections.Generic.IEnumerable<int>? homeTeamScore_in, System.Collections.Generic.IEnumerable<int>? homeTeamScore_notIn, int? awayTeamScore_greaterThan, int? awayTeamScore_lessThan, int? awayTeamScore_greaterThanOrEqual, int? awayTeamScore_lessThanOrEqual, int? awayTeamScore_equals, int? awayTeamScore_notEquals, bool? awayTeamScore_specified, System.Collections.Generic.IEnumerable<int>? awayTeamScore_in, System.Collections.Generic.IEnumerable<int>? awayTeamScore_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, long? homeTeamId_greaterThan, long? homeTeamId_lessThan, long? homeTeamId_greaterThanOrEqual, long? homeTeamId_lessThanOrEqual, long? homeTeamId_equals, long? homeTeamId_notEquals, bool? homeTeamId_specified, System.Collections.Generic.IEnumerable<long>? homeTeamId_in, System.Collections.Generic.IEnumerable<long>? homeTeamId_notIn, long? awayTeamId_greaterThan, long? awayTeamId_lessThan, long? awayTeamId_greaterThanOrEqual, long? awayTeamId_lessThanOrEqual, long? awayTeamId_equals, long? awayTeamId_notEquals, bool? awayTeamId_specified, System.Collections.Generic.IEnumerable<long>? awayTeamId_in, System.Collections.Generic.IEnumerable<long>? awayTeamId_notIn, long? predictionId_greaterThan, long? predictionId_lessThan, long? predictionId_greaterThanOrEqual, long? predictionId_lessThanOrEqual, long? predictionId_equals, long? predictionId_notEquals, bool? predictionId_specified, System.Collections.Generic.IEnumerable<long>? predictionId_in, System.Collections.Generic.IEnumerable<long>? predictionId_notIn, bool? distinct, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/matches/count"
                    urlBuilder_.Append("api/matches/count");
                    urlBuilder_.Append('?');
                    if (id_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_in != null)
                    {
                        foreach (var item_ in id_in) { urlBuilder_.Append(System.Uri.EscapeDataString("id.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (id_notIn != null)
                    {
                        foreach (var item_ in id_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("id.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (date_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(date_greaterThan.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.lessThan")).Append('=').Append(System.Uri.EscapeDataString(date_lessThan.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(date_greaterThanOrEqual.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(date_lessThanOrEqual.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.equals")).Append('=').Append(System.Uri.EscapeDataString(date_equals.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.notEquals")).Append('=').Append(System.Uri.EscapeDataString(date_notEquals.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(date_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_in != null)
                    {
                        foreach (var item_ in date_in) { urlBuilder_.Append(System.Uri.EscapeDataString("date.in")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (date_notIn != null)
                    {
                        foreach (var item_ in date_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("date.notIn")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (homeTeamScore_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_in != null)
                    {
                        foreach (var item_ in homeTeamScore_in) { urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (homeTeamScore_notIn != null)
                    {
                        foreach (var item_ in homeTeamScore_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (awayTeamScore_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_in != null)
                    {
                        foreach (var item_ in awayTeamScore_in) { urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (awayTeamScore_notIn != null)
                    {
                        foreach (var item_ in awayTeamScore_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_in != null)
                    {
                        foreach (var item_ in tournamentId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_notIn != null)
                    {
                        foreach (var item_ in tournamentId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (homeTeamId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_in != null)
                    {
                        foreach (var item_ in homeTeamId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (homeTeamId_notIn != null)
                    {
                        foreach (var item_ in homeTeamId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (awayTeamId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_in != null)
                    {
                        foreach (var item_ in awayTeamId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (awayTeamId_notIn != null)
                    {
                        foreach (var item_ in awayTeamId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (predictionId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_in != null)
                    {
                        foreach (var item_ in predictionId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (predictionId_notIn != null)
                    {
                        foreach (var item_ in predictionId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (distinct != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("distinct")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(distinct, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<long>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAppUsersClient
    {
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> CountAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, long? userId_greaterThan, long? userId_lessThan, long? userId_greaterThanOrEqual, long? userId_lessThanOrEqual, long? userId_equals, long? userId_notEquals, bool? userId_specified, System.Collections.Generic.IEnumerable<long>? userId_in, System.Collections.Generic.IEnumerable<long>? userId_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, bool? distinct);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> CountAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, long? userId_greaterThan, long? userId_lessThan, long? userId_greaterThanOrEqual, long? userId_lessThanOrEqual, long? userId_equals, long? userId_notEquals, bool? userId_specified, System.Collections.Generic.IEnumerable<long>? userId_in, System.Collections.Generic.IEnumerable<long>? userId_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, bool? distinct, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AppUsersClient : IAppUsersClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public AppUsersClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://pencapp-0848c949be13.herokuapp.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All };
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<long> CountAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, long? userId_greaterThan, long? userId_lessThan, long? userId_greaterThanOrEqual, long? userId_lessThanOrEqual, long? userId_equals, long? userId_notEquals, bool? userId_specified, System.Collections.Generic.IEnumerable<long>? userId_in, System.Collections.Generic.IEnumerable<long>? userId_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, bool? distinct)
        {
            return CountAsync(id_greaterThan, id_lessThan, id_greaterThanOrEqual, id_lessThanOrEqual, id_equals, id_notEquals, id_specified, id_in, id_notIn, userId_greaterThan, userId_lessThan, userId_greaterThanOrEqual, userId_lessThanOrEqual, userId_equals, userId_notEquals, userId_specified, userId_in, userId_notIn, tournamentId_greaterThan, tournamentId_lessThan, tournamentId_greaterThanOrEqual, tournamentId_lessThanOrEqual, tournamentId_equals, tournamentId_notEquals, tournamentId_specified, tournamentId_in, tournamentId_notIn, distinct, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<long> CountAsync(long? id_greaterThan, long? id_lessThan, long? id_greaterThanOrEqual, long? id_lessThanOrEqual, long? id_equals, long? id_notEquals, bool? id_specified, System.Collections.Generic.IEnumerable<long>? id_in, System.Collections.Generic.IEnumerable<long>? id_notIn, long? userId_greaterThan, long? userId_lessThan, long? userId_greaterThanOrEqual, long? userId_lessThanOrEqual, long? userId_equals, long? userId_notEquals, bool? userId_specified, System.Collections.Generic.IEnumerable<long>? userId_in, System.Collections.Generic.IEnumerable<long>? userId_notIn, long? tournamentId_greaterThan, long? tournamentId_lessThan, long? tournamentId_greaterThanOrEqual, long? tournamentId_lessThanOrEqual, long? tournamentId_equals, long? tournamentId_notEquals, bool? tournamentId_specified, System.Collections.Generic.IEnumerable<long>? tournamentId_in, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn, bool? distinct, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/app-users/count"
                    urlBuilder_.Append("api/app-users/count");
                    urlBuilder_.Append('?');
                    if (id_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_in != null)
                    {
                        foreach (var item_ in id_in) { urlBuilder_.Append(System.Uri.EscapeDataString("id.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (id_notIn != null)
                    {
                        foreach (var item_ in id_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("id.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (userId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_in != null)
                    {
                        foreach (var item_ in userId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("userId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (userId_notIn != null)
                    {
                        foreach (var item_ in userId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("userId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_in != null)
                    {
                        foreach (var item_ in tournamentId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_notIn != null)
                    {
                        foreach (var item_ in tournamentId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (distinct != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("distinct")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(distinct, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<long>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AppUserDTO
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDTO? User { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static AppUserDTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AppUserDTO>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TeamDTO
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tournaments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TournamentDTO>? Tournaments { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static TeamDTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeamDTO>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TournamentDTO
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset StartDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset EndDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("teams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TeamDTO>? Teams { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("appUsers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AppUserDTO>? AppUsers { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static TournamentDTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TournamentDTO>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserDTO
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Login { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static UserDTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserDTO>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MatchDTO
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Date { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeTeamScore", Required = Newtonsoft.Json.Required.Always)]
        public int HomeTeamScore { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayTeamScore", Required = Newtonsoft.Json.Required.Always)]
        public int AwayTeamScore { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tournament", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TournamentDTO? Tournament { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TeamDTO? HomeTeam { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TeamDTO? AwayTeam { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static MatchDTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MatchDTO>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PencaDTO
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset StartDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset EndDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tournament", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TournamentDTO? Tournament { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static PencaDTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PencaDTO>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PredictionDTO
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("homeTeamScore", Required = Newtonsoft.Json.Required.Always)]
        public int HomeTeamScore { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("awayTeamScore", Required = Newtonsoft.Json.Required.Always)]
        public int AwayTeamScore { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("points", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Points { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("match", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MatchDTO? Match { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("penca", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PencaDTO? Penca { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDTO? User { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static PredictionDTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PredictionDTO>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdminUserDTO
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?>[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*)|(?>[_.@A-Za-z0-9-]+)$")]
        public string Login { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? FirstName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? LastName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(254, MinimumLength = 5)]
        public string? Email { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("imageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? ImageUrl { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("activated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Activated { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("langKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 2)]
        public string? LangKey { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CreatedBy { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastModifiedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastModifiedBy { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastModifiedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("authorities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Authorities { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static AdminUserDTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdminUserDTO>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ManagedUserVM
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?>[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*)|(?>[_.@A-Za-z0-9-]+)$")]
        public string Login { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? FirstName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? LastName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(254, MinimumLength = 5)]
        public string? Email { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("imageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? ImageUrl { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("activated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Activated { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("langKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 2)]
        public string? LangKey { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CreatedBy { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastModifiedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastModifiedBy { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastModifiedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("authorities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Authorities { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 4)]
        public string? Password { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static ManagedUserVM FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ManagedUserVM>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Authority
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static Authority FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Authority>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoginVM
    {
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Username { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 4)]
        public string Password { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rememberMe", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RememberMe { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static LoginVM FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LoginVM>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JWTToken
    {
        [Newtonsoft.Json.JsonProperty("id_token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id_token { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static JWTToken FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JWTToken>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class User
    {
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CreatedBy { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastModifiedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastModifiedBy { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastModifiedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?>[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*)|(?>[_.@A-Za-z0-9-]+)$")]
        public string Login { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? FirstName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? LastName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(254, MinimumLength = 5)]
        public string? Email { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("activated", Required = Newtonsoft.Json.Required.Always)]
        public bool Activated { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("langKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 2)]
        public string? LangKey { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("imageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? ImageUrl { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("resetDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ResetDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static User FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<User>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeyAndPasswordVM
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Key { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("newPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NewPassword { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static KeyAndPasswordVM FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<KeyAndPasswordVM>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PasswordChangeDTO
    {
        [Newtonsoft.Json.JsonProperty("currentPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CurrentPassword { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("newPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NewPassword { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static PasswordChangeDTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PasswordChangeDTO>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625