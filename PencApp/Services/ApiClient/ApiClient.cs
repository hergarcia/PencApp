//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace PencApp.Services.ApiClient
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IApiClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TournamentDTO> GetTournamentAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TournamentDTO> UpdateTournamentAsync(long id, TournamentDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTournamentAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TournamentDTO> PartialUpdateTournamentAsync(long id, TournamentDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TeamDTO> GetTeamAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TeamDTO> UpdateTeamAsync(long id, TeamDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTeamAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TeamDTO> PartialUpdateTeamAsync(long id, TeamDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PredictionDTO> GetPredictionAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PredictionDTO> UpdatePredictionAsync(long id, PredictionDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePredictionAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PredictionDTO> PartialUpdatePredictionAsync(long id, PredictionDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PencaDTO> GetPencaAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PencaDTO> UpdatePencaAsync(long id, PencaDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePencaAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PencaDTO> PartialUpdatePencaAsync(long id, PencaDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MatchDTO> GetMatchAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MatchDTO> UpdateMatchAsync(long id, MatchDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteMatchAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MatchDTO> PartialUpdateMatchAsync(long id, MatchDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AppUserDTO> GetAppUserAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AppUserDTO> UpdateAppUserAsync(long id, AppUserDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAppUserAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AppUserDTO> PartialUpdateAppUserAsync(long id, AppUserDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdminUserDTO> GetUserAsync(string login, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdminUserDTO> UpdateUserAsync(string login, AdminUserDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserAsync(string login, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AdminUserDTO>> GetAllUsersAsync(int? page = null, int? size = null, System.Collections.Generic.IEnumerable<string>? sort = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdminUserDTO> UpdateUser_1Async(AdminUserDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> CreateUserAsync(AdminUserDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TournamentDTO>> GetAllTournamentsAsync(long? id_greaterThan = null, long? id_lessThan = null, long? id_greaterThanOrEqual = null, long? id_lessThanOrEqual = null, long? id_equals = null, long? id_notEquals = null, bool? id_specified = null, System.Collections.Generic.IEnumerable<long>? id_in = null, System.Collections.Generic.IEnumerable<long>? id_notIn = null, string? name_contains = null, string? name_doesNotContain = null, string? name_equals = null, string? name_notEquals = null, bool? name_specified = null, System.Collections.Generic.IEnumerable<string>? name_in = null, System.Collections.Generic.IEnumerable<string>? name_notIn = null, System.DateTime? startDate_greaterThan = null, System.DateTime? startDate_lessThan = null, System.DateTime? startDate_greaterThanOrEqual = null, System.DateTime? startDate_lessThanOrEqual = null, System.DateTime? startDate_equals = null, System.DateTime? startDate_notEquals = null, bool? startDate_specified = null, System.Collections.Generic.IEnumerable<System.DateTime>? startDate_in = null, System.Collections.Generic.IEnumerable<System.DateTime>? startDate_notIn = null, System.DateTime? endDate_greaterThan = null, System.DateTime? endDate_lessThan = null, System.DateTime? endDate_greaterThanOrEqual = null, System.DateTime? endDate_lessThanOrEqual = null, System.DateTime? endDate_equals = null, System.DateTime? endDate_notEquals = null, bool? endDate_specified = null, System.Collections.Generic.IEnumerable<System.DateTime>? endDate_in = null, System.Collections.Generic.IEnumerable<System.DateTime>? endDate_notIn = null, long? teamId_greaterThan = null, long? teamId_lessThan = null, long? teamId_greaterThanOrEqual = null, long? teamId_lessThanOrEqual = null, long? teamId_equals = null, long? teamId_notEquals = null, bool? teamId_specified = null, System.Collections.Generic.IEnumerable<long>? teamId_in = null, System.Collections.Generic.IEnumerable<long>? teamId_notIn = null, long? pencaId_greaterThan = null, long? pencaId_lessThan = null, long? pencaId_greaterThanOrEqual = null, long? pencaId_lessThanOrEqual = null, long? pencaId_equals = null, long? pencaId_notEquals = null, bool? pencaId_specified = null, System.Collections.Generic.IEnumerable<long>? pencaId_in = null, System.Collections.Generic.IEnumerable<long>? pencaId_notIn = null, long? matchId_greaterThan = null, long? matchId_lessThan = null, long? matchId_greaterThanOrEqual = null, long? matchId_lessThanOrEqual = null, long? matchId_equals = null, long? matchId_notEquals = null, bool? matchId_specified = null, System.Collections.Generic.IEnumerable<long>? matchId_in = null, System.Collections.Generic.IEnumerable<long>? matchId_notIn = null, long? appUserId_greaterThan = null, long? appUserId_lessThan = null, long? appUserId_greaterThanOrEqual = null, long? appUserId_lessThanOrEqual = null, long? appUserId_equals = null, long? appUserId_notEquals = null, bool? appUserId_specified = null, System.Collections.Generic.IEnumerable<long>? appUserId_in = null, System.Collections.Generic.IEnumerable<long>? appUserId_notIn = null, bool? distinct = null, int? page = null, int? size = null, System.Collections.Generic.IEnumerable<string>? sort = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TournamentDTO> CreateTournamentAsync(TournamentDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TeamDTO>> GetAllTeamsAsync(long? id_greaterThan = null, long? id_lessThan = null, long? id_greaterThanOrEqual = null, long? id_lessThanOrEqual = null, long? id_equals = null, long? id_notEquals = null, bool? id_specified = null, System.Collections.Generic.IEnumerable<long>? id_in = null, System.Collections.Generic.IEnumerable<long>? id_notIn = null, string? name_contains = null, string? name_doesNotContain = null, string? name_equals = null, string? name_notEquals = null, bool? name_specified = null, System.Collections.Generic.IEnumerable<string>? name_in = null, System.Collections.Generic.IEnumerable<string>? name_notIn = null, long? tournamentId_greaterThan = null, long? tournamentId_lessThan = null, long? tournamentId_greaterThanOrEqual = null, long? tournamentId_lessThanOrEqual = null, long? tournamentId_equals = null, long? tournamentId_notEquals = null, bool? tournamentId_specified = null, System.Collections.Generic.IEnumerable<long>? tournamentId_in = null, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn = null, bool? distinct = null, int? page = null, int? size = null, System.Collections.Generic.IEnumerable<string>? sort = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TeamDTO> CreateTeamAsync(TeamDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RegisterAccountAsync(ManagedUserVM body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PredictionDTO>> GetAllPredictionsAsync(long? id_greaterThan = null, long? id_lessThan = null, long? id_greaterThanOrEqual = null, long? id_lessThanOrEqual = null, long? id_equals = null, long? id_notEquals = null, bool? id_specified = null, System.Collections.Generic.IEnumerable<long>? id_in = null, System.Collections.Generic.IEnumerable<long>? id_notIn = null, int? homeTeamScore_greaterThan = null, int? homeTeamScore_lessThan = null, int? homeTeamScore_greaterThanOrEqual = null, int? homeTeamScore_lessThanOrEqual = null, int? homeTeamScore_equals = null, int? homeTeamScore_notEquals = null, bool? homeTeamScore_specified = null, System.Collections.Generic.IEnumerable<int>? homeTeamScore_in = null, System.Collections.Generic.IEnumerable<int>? homeTeamScore_notIn = null, int? awayTeamScore_greaterThan = null, int? awayTeamScore_lessThan = null, int? awayTeamScore_greaterThanOrEqual = null, int? awayTeamScore_lessThanOrEqual = null, int? awayTeamScore_equals = null, int? awayTeamScore_notEquals = null, bool? awayTeamScore_specified = null, System.Collections.Generic.IEnumerable<int>? awayTeamScore_in = null, System.Collections.Generic.IEnumerable<int>? awayTeamScore_notIn = null, int? points_greaterThan = null, int? points_lessThan = null, int? points_greaterThanOrEqual = null, int? points_lessThanOrEqual = null, int? points_equals = null, int? points_notEquals = null, bool? points_specified = null, System.Collections.Generic.IEnumerable<int>? points_in = null, System.Collections.Generic.IEnumerable<int>? points_notIn = null, long? matchId_greaterThan = null, long? matchId_lessThan = null, long? matchId_greaterThanOrEqual = null, long? matchId_lessThanOrEqual = null, long? matchId_equals = null, long? matchId_notEquals = null, bool? matchId_specified = null, System.Collections.Generic.IEnumerable<long>? matchId_in = null, System.Collections.Generic.IEnumerable<long>? matchId_notIn = null, long? pencaId_greaterThan = null, long? pencaId_lessThan = null, long? pencaId_greaterThanOrEqual = null, long? pencaId_lessThanOrEqual = null, long? pencaId_equals = null, long? pencaId_notEquals = null, bool? pencaId_specified = null, System.Collections.Generic.IEnumerable<long>? pencaId_in = null, System.Collections.Generic.IEnumerable<long>? pencaId_notIn = null, long? userId_greaterThan = null, long? userId_lessThan = null, long? userId_greaterThanOrEqual = null, long? userId_lessThanOrEqual = null, long? userId_equals = null, long? userId_notEquals = null, bool? userId_specified = null, System.Collections.Generic.IEnumerable<long>? userId_in = null, System.Collections.Generic.IEnumerable<long>? userId_notIn = null, bool? distinct = null, int? page = null, int? size = null, System.Collections.Generic.IEnumerable<string>? sort = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PredictionDTO> CreatePredictionAsync(PredictionDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PencaDTO>> GetAllPencasAsync(long? id_greaterThan = null, long? id_lessThan = null, long? id_greaterThanOrEqual = null, long? id_lessThanOrEqual = null, long? id_equals = null, long? id_notEquals = null, bool? id_specified = null, System.Collections.Generic.IEnumerable<long>? id_in = null, System.Collections.Generic.IEnumerable<long>? id_notIn = null, string? name_contains = null, string? name_doesNotContain = null, string? name_equals = null, string? name_notEquals = null, bool? name_specified = null, System.Collections.Generic.IEnumerable<string>? name_in = null, System.Collections.Generic.IEnumerable<string>? name_notIn = null, System.DateTime? startDate_greaterThan = null, System.DateTime? startDate_lessThan = null, System.DateTime? startDate_greaterThanOrEqual = null, System.DateTime? startDate_lessThanOrEqual = null, System.DateTime? startDate_equals = null, System.DateTime? startDate_notEquals = null, bool? startDate_specified = null, System.Collections.Generic.IEnumerable<System.DateTime>? startDate_in = null, System.Collections.Generic.IEnumerable<System.DateTime>? startDate_notIn = null, System.DateTime? endDate_greaterThan = null, System.DateTime? endDate_lessThan = null, System.DateTime? endDate_greaterThanOrEqual = null, System.DateTime? endDate_lessThanOrEqual = null, System.DateTime? endDate_equals = null, System.DateTime? endDate_notEquals = null, bool? endDate_specified = null, System.Collections.Generic.IEnumerable<System.DateTime>? endDate_in = null, System.Collections.Generic.IEnumerable<System.DateTime>? endDate_notIn = null, long? tournamentId_greaterThan = null, long? tournamentId_lessThan = null, long? tournamentId_greaterThanOrEqual = null, long? tournamentId_lessThanOrEqual = null, long? tournamentId_equals = null, long? tournamentId_notEquals = null, bool? tournamentId_specified = null, System.Collections.Generic.IEnumerable<long>? tournamentId_in = null, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn = null, long? predictionId_greaterThan = null, long? predictionId_lessThan = null, long? predictionId_greaterThanOrEqual = null, long? predictionId_lessThanOrEqual = null, long? predictionId_equals = null, long? predictionId_notEquals = null, bool? predictionId_specified = null, System.Collections.Generic.IEnumerable<long>? predictionId_in = null, System.Collections.Generic.IEnumerable<long>? predictionId_notIn = null, bool? distinct = null, int? page = null, int? size = null, System.Collections.Generic.IEnumerable<string>? sort = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PencaDTO> CreatePencaAsync(PencaDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MatchDTO>> GetAllMatchesAsync(long? id_greaterThan = null, long? id_lessThan = null, long? id_greaterThanOrEqual = null, long? id_lessThanOrEqual = null, long? id_equals = null, long? id_notEquals = null, bool? id_specified = null, System.Collections.Generic.IEnumerable<long>? id_in = null, System.Collections.Generic.IEnumerable<long>? id_notIn = null, System.DateTime? date_greaterThan = null, System.DateTime? date_lessThan = null, System.DateTime? date_greaterThanOrEqual = null, System.DateTime? date_lessThanOrEqual = null, System.DateTime? date_equals = null, System.DateTime? date_notEquals = null, bool? date_specified = null, System.Collections.Generic.IEnumerable<System.DateTime>? date_in = null, System.Collections.Generic.IEnumerable<System.DateTime>? date_notIn = null, int? homeTeamScore_greaterThan = null, int? homeTeamScore_lessThan = null, int? homeTeamScore_greaterThanOrEqual = null, int? homeTeamScore_lessThanOrEqual = null, int? homeTeamScore_equals = null, int? homeTeamScore_notEquals = null, bool? homeTeamScore_specified = null, System.Collections.Generic.IEnumerable<int>? homeTeamScore_in = null, System.Collections.Generic.IEnumerable<int>? homeTeamScore_notIn = null, int? awayTeamScore_greaterThan = null, int? awayTeamScore_lessThan = null, int? awayTeamScore_greaterThanOrEqual = null, int? awayTeamScore_lessThanOrEqual = null, int? awayTeamScore_equals = null, int? awayTeamScore_notEquals = null, bool? awayTeamScore_specified = null, System.Collections.Generic.IEnumerable<int>? awayTeamScore_in = null, System.Collections.Generic.IEnumerable<int>? awayTeamScore_notIn = null, long? tournamentId_greaterThan = null, long? tournamentId_lessThan = null, long? tournamentId_greaterThanOrEqual = null, long? tournamentId_lessThanOrEqual = null, long? tournamentId_equals = null, long? tournamentId_notEquals = null, bool? tournamentId_specified = null, System.Collections.Generic.IEnumerable<long>? tournamentId_in = null, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn = null, long? homeTeamId_greaterThan = null, long? homeTeamId_lessThan = null, long? homeTeamId_greaterThanOrEqual = null, long? homeTeamId_lessThanOrEqual = null, long? homeTeamId_equals = null, long? homeTeamId_notEquals = null, bool? homeTeamId_specified = null, System.Collections.Generic.IEnumerable<long>? homeTeamId_in = null, System.Collections.Generic.IEnumerable<long>? homeTeamId_notIn = null, long? awayTeamId_greaterThan = null, long? awayTeamId_lessThan = null, long? awayTeamId_greaterThanOrEqual = null, long? awayTeamId_lessThanOrEqual = null, long? awayTeamId_equals = null, long? awayTeamId_notEquals = null, bool? awayTeamId_specified = null, System.Collections.Generic.IEnumerable<long>? awayTeamId_in = null, System.Collections.Generic.IEnumerable<long>? awayTeamId_notIn = null, long? predictionId_greaterThan = null, long? predictionId_lessThan = null, long? predictionId_greaterThanOrEqual = null, long? predictionId_lessThanOrEqual = null, long? predictionId_equals = null, long? predictionId_notEquals = null, bool? predictionId_specified = null, System.Collections.Generic.IEnumerable<long>? predictionId_in = null, System.Collections.Generic.IEnumerable<long>? predictionId_notIn = null, bool? distinct = null, int? page = null, int? size = null, System.Collections.Generic.IEnumerable<string>? sort = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MatchDTO> CreateMatchAsync(MatchDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Authority>> GetAllAuthoritiesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Authority> CreateAuthorityAsync(Authority body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> IsAuthenticatedAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JWTToken> AuthorizeAsync(LoginVM body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AppUserDTO>> GetAllAppUsersAsync(long? id_greaterThan = null, long? id_lessThan = null, long? id_greaterThanOrEqual = null, long? id_lessThanOrEqual = null, long? id_equals = null, long? id_notEquals = null, bool? id_specified = null, System.Collections.Generic.IEnumerable<long>? id_in = null, System.Collections.Generic.IEnumerable<long>? id_notIn = null, long? userId_greaterThan = null, long? userId_lessThan = null, long? userId_greaterThanOrEqual = null, long? userId_lessThanOrEqual = null, long? userId_equals = null, long? userId_notEquals = null, bool? userId_specified = null, System.Collections.Generic.IEnumerable<long>? userId_in = null, System.Collections.Generic.IEnumerable<long>? userId_notIn = null, long? tournamentId_greaterThan = null, long? tournamentId_lessThan = null, long? tournamentId_greaterThanOrEqual = null, long? tournamentId_lessThanOrEqual = null, long? tournamentId_equals = null, long? tournamentId_notEquals = null, bool? tournamentId_specified = null, System.Collections.Generic.IEnumerable<long>? tournamentId_in = null, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn = null, bool? distinct = null, int? page = null, int? size = null, System.Collections.Generic.IEnumerable<string>? sort = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AppUserDTO> CreateAppUserAsync(AppUserDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdminUserDTO> GetAccountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaveAccountAsync(AdminUserDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RequestPasswordResetAsync(string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FinishPasswordResetAsync(KeyAndPasswordVM body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ChangePasswordAsync(PasswordChangeDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserDTO>> GetAllPublicUsersAsync(int? page = null, int? size = null, System.Collections.Generic.IEnumerable<string>? sort = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> CountTournamentsAsync(long? id_greaterThan = null, long? id_lessThan = null, long? id_greaterThanOrEqual = null, long? id_lessThanOrEqual = null, long? id_equals = null, long? id_notEquals = null, bool? id_specified = null, System.Collections.Generic.IEnumerable<long>? id_in = null, System.Collections.Generic.IEnumerable<long>? id_notIn = null, string? name_contains = null, string? name_doesNotContain = null, string? name_equals = null, string? name_notEquals = null, bool? name_specified = null, System.Collections.Generic.IEnumerable<string>? name_in = null, System.Collections.Generic.IEnumerable<string>? name_notIn = null, System.DateTime? startDate_greaterThan = null, System.DateTime? startDate_lessThan = null, System.DateTime? startDate_greaterThanOrEqual = null, System.DateTime? startDate_lessThanOrEqual = null, System.DateTime? startDate_equals = null, System.DateTime? startDate_notEquals = null, bool? startDate_specified = null, System.Collections.Generic.IEnumerable<System.DateTime>? startDate_in = null, System.Collections.Generic.IEnumerable<System.DateTime>? startDate_notIn = null, System.DateTime? endDate_greaterThan = null, System.DateTime? endDate_lessThan = null, System.DateTime? endDate_greaterThanOrEqual = null, System.DateTime? endDate_lessThanOrEqual = null, System.DateTime? endDate_equals = null, System.DateTime? endDate_notEquals = null, bool? endDate_specified = null, System.Collections.Generic.IEnumerable<System.DateTime>? endDate_in = null, System.Collections.Generic.IEnumerable<System.DateTime>? endDate_notIn = null, long? teamId_greaterThan = null, long? teamId_lessThan = null, long? teamId_greaterThanOrEqual = null, long? teamId_lessThanOrEqual = null, long? teamId_equals = null, long? teamId_notEquals = null, bool? teamId_specified = null, System.Collections.Generic.IEnumerable<long>? teamId_in = null, System.Collections.Generic.IEnumerable<long>? teamId_notIn = null, long? pencaId_greaterThan = null, long? pencaId_lessThan = null, long? pencaId_greaterThanOrEqual = null, long? pencaId_lessThanOrEqual = null, long? pencaId_equals = null, long? pencaId_notEquals = null, bool? pencaId_specified = null, System.Collections.Generic.IEnumerable<long>? pencaId_in = null, System.Collections.Generic.IEnumerable<long>? pencaId_notIn = null, long? matchId_greaterThan = null, long? matchId_lessThan = null, long? matchId_greaterThanOrEqual = null, long? matchId_lessThanOrEqual = null, long? matchId_equals = null, long? matchId_notEquals = null, bool? matchId_specified = null, System.Collections.Generic.IEnumerable<long>? matchId_in = null, System.Collections.Generic.IEnumerable<long>? matchId_notIn = null, long? appUserId_greaterThan = null, long? appUserId_lessThan = null, long? appUserId_greaterThanOrEqual = null, long? appUserId_lessThanOrEqual = null, long? appUserId_equals = null, long? appUserId_notEquals = null, bool? appUserId_specified = null, System.Collections.Generic.IEnumerable<long>? appUserId_in = null, System.Collections.Generic.IEnumerable<long>? appUserId_notIn = null, bool? distinct = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> CountTeamsAsync(long? id_greaterThan = null, long? id_lessThan = null, long? id_greaterThanOrEqual = null, long? id_lessThanOrEqual = null, long? id_equals = null, long? id_notEquals = null, bool? id_specified = null, System.Collections.Generic.IEnumerable<long>? id_in = null, System.Collections.Generic.IEnumerable<long>? id_notIn = null, string? name_contains = null, string? name_doesNotContain = null, string? name_equals = null, string? name_notEquals = null, bool? name_specified = null, System.Collections.Generic.IEnumerable<string>? name_in = null, System.Collections.Generic.IEnumerable<string>? name_notIn = null, long? tournamentId_greaterThan = null, long? tournamentId_lessThan = null, long? tournamentId_greaterThanOrEqual = null, long? tournamentId_lessThanOrEqual = null, long? tournamentId_equals = null, long? tournamentId_notEquals = null, bool? tournamentId_specified = null, System.Collections.Generic.IEnumerable<long>? tournamentId_in = null, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn = null, bool? distinct = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> CountPredictionsAsync(long? id_greaterThan = null, long? id_lessThan = null, long? id_greaterThanOrEqual = null, long? id_lessThanOrEqual = null, long? id_equals = null, long? id_notEquals = null, bool? id_specified = null, System.Collections.Generic.IEnumerable<long>? id_in = null, System.Collections.Generic.IEnumerable<long>? id_notIn = null, int? homeTeamScore_greaterThan = null, int? homeTeamScore_lessThan = null, int? homeTeamScore_greaterThanOrEqual = null, int? homeTeamScore_lessThanOrEqual = null, int? homeTeamScore_equals = null, int? homeTeamScore_notEquals = null, bool? homeTeamScore_specified = null, System.Collections.Generic.IEnumerable<int>? homeTeamScore_in = null, System.Collections.Generic.IEnumerable<int>? homeTeamScore_notIn = null, int? awayTeamScore_greaterThan = null, int? awayTeamScore_lessThan = null, int? awayTeamScore_greaterThanOrEqual = null, int? awayTeamScore_lessThanOrEqual = null, int? awayTeamScore_equals = null, int? awayTeamScore_notEquals = null, bool? awayTeamScore_specified = null, System.Collections.Generic.IEnumerable<int>? awayTeamScore_in = null, System.Collections.Generic.IEnumerable<int>? awayTeamScore_notIn = null, int? points_greaterThan = null, int? points_lessThan = null, int? points_greaterThanOrEqual = null, int? points_lessThanOrEqual = null, int? points_equals = null, int? points_notEquals = null, bool? points_specified = null, System.Collections.Generic.IEnumerable<int>? points_in = null, System.Collections.Generic.IEnumerable<int>? points_notIn = null, long? matchId_greaterThan = null, long? matchId_lessThan = null, long? matchId_greaterThanOrEqual = null, long? matchId_lessThanOrEqual = null, long? matchId_equals = null, long? matchId_notEquals = null, bool? matchId_specified = null, System.Collections.Generic.IEnumerable<long>? matchId_in = null, System.Collections.Generic.IEnumerable<long>? matchId_notIn = null, long? pencaId_greaterThan = null, long? pencaId_lessThan = null, long? pencaId_greaterThanOrEqual = null, long? pencaId_lessThanOrEqual = null, long? pencaId_equals = null, long? pencaId_notEquals = null, bool? pencaId_specified = null, System.Collections.Generic.IEnumerable<long>? pencaId_in = null, System.Collections.Generic.IEnumerable<long>? pencaId_notIn = null, long? userId_greaterThan = null, long? userId_lessThan = null, long? userId_greaterThanOrEqual = null, long? userId_lessThanOrEqual = null, long? userId_equals = null, long? userId_notEquals = null, bool? userId_specified = null, System.Collections.Generic.IEnumerable<long>? userId_in = null, System.Collections.Generic.IEnumerable<long>? userId_notIn = null, bool? distinct = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> CountPencasAsync(long? id_greaterThan = null, long? id_lessThan = null, long? id_greaterThanOrEqual = null, long? id_lessThanOrEqual = null, long? id_equals = null, long? id_notEquals = null, bool? id_specified = null, System.Collections.Generic.IEnumerable<long>? id_in = null, System.Collections.Generic.IEnumerable<long>? id_notIn = null, string? name_contains = null, string? name_doesNotContain = null, string? name_equals = null, string? name_notEquals = null, bool? name_specified = null, System.Collections.Generic.IEnumerable<string>? name_in = null, System.Collections.Generic.IEnumerable<string>? name_notIn = null, System.DateTime? startDate_greaterThan = null, System.DateTime? startDate_lessThan = null, System.DateTime? startDate_greaterThanOrEqual = null, System.DateTime? startDate_lessThanOrEqual = null, System.DateTime? startDate_equals = null, System.DateTime? startDate_notEquals = null, bool? startDate_specified = null, System.Collections.Generic.IEnumerable<System.DateTime>? startDate_in = null, System.Collections.Generic.IEnumerable<System.DateTime>? startDate_notIn = null, System.DateTime? endDate_greaterThan = null, System.DateTime? endDate_lessThan = null, System.DateTime? endDate_greaterThanOrEqual = null, System.DateTime? endDate_lessThanOrEqual = null, System.DateTime? endDate_equals = null, System.DateTime? endDate_notEquals = null, bool? endDate_specified = null, System.Collections.Generic.IEnumerable<System.DateTime>? endDate_in = null, System.Collections.Generic.IEnumerable<System.DateTime>? endDate_notIn = null, long? tournamentId_greaterThan = null, long? tournamentId_lessThan = null, long? tournamentId_greaterThanOrEqual = null, long? tournamentId_lessThanOrEqual = null, long? tournamentId_equals = null, long? tournamentId_notEquals = null, bool? tournamentId_specified = null, System.Collections.Generic.IEnumerable<long>? tournamentId_in = null, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn = null, long? predictionId_greaterThan = null, long? predictionId_lessThan = null, long? predictionId_greaterThanOrEqual = null, long? predictionId_lessThanOrEqual = null, long? predictionId_equals = null, long? predictionId_notEquals = null, bool? predictionId_specified = null, System.Collections.Generic.IEnumerable<long>? predictionId_in = null, System.Collections.Generic.IEnumerable<long>? predictionId_notIn = null, bool? distinct = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> CountMatchesAsync(long? id_greaterThan = null, long? id_lessThan = null, long? id_greaterThanOrEqual = null, long? id_lessThanOrEqual = null, long? id_equals = null, long? id_notEquals = null, bool? id_specified = null, System.Collections.Generic.IEnumerable<long>? id_in = null, System.Collections.Generic.IEnumerable<long>? id_notIn = null, System.DateTime? date_greaterThan = null, System.DateTime? date_lessThan = null, System.DateTime? date_greaterThanOrEqual = null, System.DateTime? date_lessThanOrEqual = null, System.DateTime? date_equals = null, System.DateTime? date_notEquals = null, bool? date_specified = null, System.Collections.Generic.IEnumerable<System.DateTime>? date_in = null, System.Collections.Generic.IEnumerable<System.DateTime>? date_notIn = null, int? homeTeamScore_greaterThan = null, int? homeTeamScore_lessThan = null, int? homeTeamScore_greaterThanOrEqual = null, int? homeTeamScore_lessThanOrEqual = null, int? homeTeamScore_equals = null, int? homeTeamScore_notEquals = null, bool? homeTeamScore_specified = null, System.Collections.Generic.IEnumerable<int>? homeTeamScore_in = null, System.Collections.Generic.IEnumerable<int>? homeTeamScore_notIn = null, int? awayTeamScore_greaterThan = null, int? awayTeamScore_lessThan = null, int? awayTeamScore_greaterThanOrEqual = null, int? awayTeamScore_lessThanOrEqual = null, int? awayTeamScore_equals = null, int? awayTeamScore_notEquals = null, bool? awayTeamScore_specified = null, System.Collections.Generic.IEnumerable<int>? awayTeamScore_in = null, System.Collections.Generic.IEnumerable<int>? awayTeamScore_notIn = null, long? tournamentId_greaterThan = null, long? tournamentId_lessThan = null, long? tournamentId_greaterThanOrEqual = null, long? tournamentId_lessThanOrEqual = null, long? tournamentId_equals = null, long? tournamentId_notEquals = null, bool? tournamentId_specified = null, System.Collections.Generic.IEnumerable<long>? tournamentId_in = null, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn = null, long? homeTeamId_greaterThan = null, long? homeTeamId_lessThan = null, long? homeTeamId_greaterThanOrEqual = null, long? homeTeamId_lessThanOrEqual = null, long? homeTeamId_equals = null, long? homeTeamId_notEquals = null, bool? homeTeamId_specified = null, System.Collections.Generic.IEnumerable<long>? homeTeamId_in = null, System.Collections.Generic.IEnumerable<long>? homeTeamId_notIn = null, long? awayTeamId_greaterThan = null, long? awayTeamId_lessThan = null, long? awayTeamId_greaterThanOrEqual = null, long? awayTeamId_lessThanOrEqual = null, long? awayTeamId_equals = null, long? awayTeamId_notEquals = null, bool? awayTeamId_specified = null, System.Collections.Generic.IEnumerable<long>? awayTeamId_in = null, System.Collections.Generic.IEnumerable<long>? awayTeamId_notIn = null, long? predictionId_greaterThan = null, long? predictionId_lessThan = null, long? predictionId_greaterThanOrEqual = null, long? predictionId_lessThanOrEqual = null, long? predictionId_equals = null, long? predictionId_notEquals = null, bool? predictionId_specified = null, System.Collections.Generic.IEnumerable<long>? predictionId_in = null, System.Collections.Generic.IEnumerable<long>? predictionId_notIn = null, bool? distinct = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Authority> GetAuthorityAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAuthorityAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> CountAppUsersAsync(long? id_greaterThan = null, long? id_lessThan = null, long? id_greaterThanOrEqual = null, long? id_lessThanOrEqual = null, long? id_equals = null, long? id_notEquals = null, bool? id_specified = null, System.Collections.Generic.IEnumerable<long>? id_in = null, System.Collections.Generic.IEnumerable<long>? id_notIn = null, long? userId_greaterThan = null, long? userId_lessThan = null, long? userId_greaterThanOrEqual = null, long? userId_lessThanOrEqual = null, long? userId_equals = null, long? userId_notEquals = null, bool? userId_specified = null, System.Collections.Generic.IEnumerable<long>? userId_in = null, System.Collections.Generic.IEnumerable<long>? userId_notIn = null, long? tournamentId_greaterThan = null, long? tournamentId_lessThan = null, long? tournamentId_greaterThanOrEqual = null, long? tournamentId_lessThanOrEqual = null, long? tournamentId_equals = null, long? tournamentId_notEquals = null, bool? tournamentId_specified = null, System.Collections.Generic.IEnumerable<long>? tournamentId_in = null, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn = null, bool? distinct = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ActivateAccountAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiClient : IApiClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public ApiClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://pencapp-0848c949be13.herokuapp.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All };
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TournamentDTO> GetTournamentAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/tournaments/{id}"
                    urlBuilder_.Append("api/tournaments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TournamentDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TournamentDTO> UpdateTournamentAsync(long id, TournamentDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/tournaments/{id}"
                    urlBuilder_.Append("api/tournaments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TournamentDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteTournamentAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/tournaments/{id}"
                    urlBuilder_.Append("api/tournaments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TournamentDTO> PartialUpdateTournamentAsync(long id, TournamentDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/tournaments/{id}"
                    urlBuilder_.Append("api/tournaments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TournamentDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TeamDTO> GetTeamAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/teams/{id}"
                    urlBuilder_.Append("api/teams/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TeamDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TeamDTO> UpdateTeamAsync(long id, TeamDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/teams/{id}"
                    urlBuilder_.Append("api/teams/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TeamDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteTeamAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/teams/{id}"
                    urlBuilder_.Append("api/teams/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TeamDTO> PartialUpdateTeamAsync(long id, TeamDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/teams/{id}"
                    urlBuilder_.Append("api/teams/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TeamDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PredictionDTO> GetPredictionAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/predictions/{id}"
                    urlBuilder_.Append("api/predictions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PredictionDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PredictionDTO> UpdatePredictionAsync(long id, PredictionDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/predictions/{id}"
                    urlBuilder_.Append("api/predictions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PredictionDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeletePredictionAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/predictions/{id}"
                    urlBuilder_.Append("api/predictions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PredictionDTO> PartialUpdatePredictionAsync(long id, PredictionDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/predictions/{id}"
                    urlBuilder_.Append("api/predictions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PredictionDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PencaDTO> GetPencaAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/pencas/{id}"
                    urlBuilder_.Append("api/pencas/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PencaDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PencaDTO> UpdatePencaAsync(long id, PencaDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/pencas/{id}"
                    urlBuilder_.Append("api/pencas/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PencaDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeletePencaAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/pencas/{id}"
                    urlBuilder_.Append("api/pencas/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PencaDTO> PartialUpdatePencaAsync(long id, PencaDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/pencas/{id}"
                    urlBuilder_.Append("api/pencas/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PencaDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MatchDTO> GetMatchAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/matches/{id}"
                    urlBuilder_.Append("api/matches/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MatchDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MatchDTO> UpdateMatchAsync(long id, MatchDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/matches/{id}"
                    urlBuilder_.Append("api/matches/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MatchDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteMatchAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/matches/{id}"
                    urlBuilder_.Append("api/matches/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MatchDTO> PartialUpdateMatchAsync(long id, MatchDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/matches/{id}"
                    urlBuilder_.Append("api/matches/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MatchDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AppUserDTO> GetAppUserAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/app-users/{id}"
                    urlBuilder_.Append("api/app-users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AppUserDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AppUserDTO> UpdateAppUserAsync(long id, AppUserDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/app-users/{id}"
                    urlBuilder_.Append("api/app-users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AppUserDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteAppUserAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/app-users/{id}"
                    urlBuilder_.Append("api/app-users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AppUserDTO> PartialUpdateAppUserAsync(long id, AppUserDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/app-users/{id}"
                    urlBuilder_.Append("api/app-users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AppUserDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AdminUserDTO> GetUserAsync(string login, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (login == null)
                throw new System.ArgumentNullException("login");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/admin/users/{login}"
                    urlBuilder_.Append("api/admin/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(login, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdminUserDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AdminUserDTO> UpdateUserAsync(string login, AdminUserDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (login == null)
                throw new System.ArgumentNullException("login");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/admin/users/{login}"
                    urlBuilder_.Append("api/admin/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(login, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdminUserDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteUserAsync(string login, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (login == null)
                throw new System.ArgumentNullException("login");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/admin/users/{login}"
                    urlBuilder_.Append("api/admin/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(login, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AdminUserDTO>> GetAllUsersAsync(int? page = null, int? size = null, System.Collections.Generic.IEnumerable<string>? sort = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/admin/users"
                    urlBuilder_.Append("api/admin/users");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                        foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AdminUserDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AdminUserDTO> UpdateUser_1Async(AdminUserDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/admin/users"
                    urlBuilder_.Append("api/admin/users");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdminUserDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<User> CreateUserAsync(AdminUserDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/admin/users"
                    urlBuilder_.Append("api/admin/users");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<User>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TournamentDTO>> GetAllTournamentsAsync(long? id_greaterThan = null, long? id_lessThan = null, long? id_greaterThanOrEqual = null, long? id_lessThanOrEqual = null, long? id_equals = null, long? id_notEquals = null, bool? id_specified = null, System.Collections.Generic.IEnumerable<long>? id_in = null, System.Collections.Generic.IEnumerable<long>? id_notIn = null, string? name_contains = null, string? name_doesNotContain = null, string? name_equals = null, string? name_notEquals = null, bool? name_specified = null, System.Collections.Generic.IEnumerable<string>? name_in = null, System.Collections.Generic.IEnumerable<string>? name_notIn = null, System.DateTime? startDate_greaterThan = null, System.DateTime? startDate_lessThan = null, System.DateTime? startDate_greaterThanOrEqual = null, System.DateTime? startDate_lessThanOrEqual = null, System.DateTime? startDate_equals = null, System.DateTime? startDate_notEquals = null, bool? startDate_specified = null, System.Collections.Generic.IEnumerable<System.DateTime>? startDate_in = null, System.Collections.Generic.IEnumerable<System.DateTime>? startDate_notIn = null, System.DateTime? endDate_greaterThan = null, System.DateTime? endDate_lessThan = null, System.DateTime? endDate_greaterThanOrEqual = null, System.DateTime? endDate_lessThanOrEqual = null, System.DateTime? endDate_equals = null, System.DateTime? endDate_notEquals = null, bool? endDate_specified = null, System.Collections.Generic.IEnumerable<System.DateTime>? endDate_in = null, System.Collections.Generic.IEnumerable<System.DateTime>? endDate_notIn = null, long? teamId_greaterThan = null, long? teamId_lessThan = null, long? teamId_greaterThanOrEqual = null, long? teamId_lessThanOrEqual = null, long? teamId_equals = null, long? teamId_notEquals = null, bool? teamId_specified = null, System.Collections.Generic.IEnumerable<long>? teamId_in = null, System.Collections.Generic.IEnumerable<long>? teamId_notIn = null, long? pencaId_greaterThan = null, long? pencaId_lessThan = null, long? pencaId_greaterThanOrEqual = null, long? pencaId_lessThanOrEqual = null, long? pencaId_equals = null, long? pencaId_notEquals = null, bool? pencaId_specified = null, System.Collections.Generic.IEnumerable<long>? pencaId_in = null, System.Collections.Generic.IEnumerable<long>? pencaId_notIn = null, long? matchId_greaterThan = null, long? matchId_lessThan = null, long? matchId_greaterThanOrEqual = null, long? matchId_lessThanOrEqual = null, long? matchId_equals = null, long? matchId_notEquals = null, bool? matchId_specified = null, System.Collections.Generic.IEnumerable<long>? matchId_in = null, System.Collections.Generic.IEnumerable<long>? matchId_notIn = null, long? appUserId_greaterThan = null, long? appUserId_lessThan = null, long? appUserId_greaterThanOrEqual = null, long? appUserId_lessThanOrEqual = null, long? appUserId_equals = null, long? appUserId_notEquals = null, bool? appUserId_specified = null, System.Collections.Generic.IEnumerable<long>? appUserId_in = null, System.Collections.Generic.IEnumerable<long>? appUserId_notIn = null, bool? distinct = null, int? page = null, int? size = null, System.Collections.Generic.IEnumerable<string>? sort = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/tournaments"
                    urlBuilder_.Append("api/tournaments");
                    urlBuilder_.Append('?');
                    if (id_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_in != null)
                    {
                        foreach (var item_ in id_in) { urlBuilder_.Append(System.Uri.EscapeDataString("id.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (id_notIn != null)
                    {
                        foreach (var item_ in id_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("id.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (name_contains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.contains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_contains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_doesNotContain != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.doesNotContain")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_doesNotContain, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_in != null)
                    {
                        foreach (var item_ in name_in) { urlBuilder_.Append(System.Uri.EscapeDataString("name.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (name_notIn != null)
                    {
                        foreach (var item_ in name_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("name.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (startDate_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(startDate_greaterThan.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.lessThan")).Append('=').Append(System.Uri.EscapeDataString(startDate_lessThan.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(startDate_greaterThanOrEqual.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(startDate_lessThanOrEqual.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.equals")).Append('=').Append(System.Uri.EscapeDataString(startDate_equals.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.notEquals")).Append('=').Append(System.Uri.EscapeDataString(startDate_notEquals.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startDate_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_in != null)
                    {
                        foreach (var item_ in startDate_in) { urlBuilder_.Append(System.Uri.EscapeDataString("startDate.in")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (startDate_notIn != null)
                    {
                        foreach (var item_ in startDate_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("startDate.notIn")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (endDate_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(endDate_greaterThan.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.lessThan")).Append('=').Append(System.Uri.EscapeDataString(endDate_lessThan.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(endDate_greaterThanOrEqual.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(endDate_lessThanOrEqual.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.equals")).Append('=').Append(System.Uri.EscapeDataString(endDate_equals.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.notEquals")).Append('=').Append(System.Uri.EscapeDataString(endDate_notEquals.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(endDate_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_in != null)
                    {
                        foreach (var item_ in endDate_in) { urlBuilder_.Append(System.Uri.EscapeDataString("endDate.in")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (endDate_notIn != null)
                    {
                        foreach (var item_ in endDate_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("endDate.notIn")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (teamId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_in != null)
                    {
                        foreach (var item_ in teamId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("teamId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (teamId_notIn != null)
                    {
                        foreach (var item_ in teamId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("teamId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pencaId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_in != null)
                    {
                        foreach (var item_ in pencaId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pencaId_notIn != null)
                    {
                        foreach (var item_ in pencaId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (matchId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_in != null)
                    {
                        foreach (var item_ in matchId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("matchId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (matchId_notIn != null)
                    {
                        foreach (var item_ in matchId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("matchId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (appUserId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_in != null)
                    {
                        foreach (var item_ in appUserId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (appUserId_notIn != null)
                    {
                        foreach (var item_ in appUserId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (distinct != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("distinct")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(distinct, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                        foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TournamentDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TournamentDTO> CreateTournamentAsync(TournamentDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/tournaments"
                    urlBuilder_.Append("api/tournaments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TournamentDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TeamDTO>> GetAllTeamsAsync(long? id_greaterThan = null, long? id_lessThan = null, long? id_greaterThanOrEqual = null, long? id_lessThanOrEqual = null, long? id_equals = null, long? id_notEquals = null, bool? id_specified = null, System.Collections.Generic.IEnumerable<long>? id_in = null, System.Collections.Generic.IEnumerable<long>? id_notIn = null, string? name_contains = null, string? name_doesNotContain = null, string? name_equals = null, string? name_notEquals = null, bool? name_specified = null, System.Collections.Generic.IEnumerable<string>? name_in = null, System.Collections.Generic.IEnumerable<string>? name_notIn = null, long? tournamentId_greaterThan = null, long? tournamentId_lessThan = null, long? tournamentId_greaterThanOrEqual = null, long? tournamentId_lessThanOrEqual = null, long? tournamentId_equals = null, long? tournamentId_notEquals = null, bool? tournamentId_specified = null, System.Collections.Generic.IEnumerable<long>? tournamentId_in = null, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn = null, bool? distinct = null, int? page = null, int? size = null, System.Collections.Generic.IEnumerable<string>? sort = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/teams"
                    urlBuilder_.Append("api/teams");
                    urlBuilder_.Append('?');
                    if (id_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_in != null)
                    {
                        foreach (var item_ in id_in) { urlBuilder_.Append(System.Uri.EscapeDataString("id.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (id_notIn != null)
                    {
                        foreach (var item_ in id_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("id.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (name_contains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.contains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_contains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_doesNotContain != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.doesNotContain")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_doesNotContain, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_in != null)
                    {
                        foreach (var item_ in name_in) { urlBuilder_.Append(System.Uri.EscapeDataString("name.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (name_notIn != null)
                    {
                        foreach (var item_ in name_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("name.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_in != null)
                    {
                        foreach (var item_ in tournamentId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_notIn != null)
                    {
                        foreach (var item_ in tournamentId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (distinct != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("distinct")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(distinct, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                        foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TeamDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TeamDTO> CreateTeamAsync(TeamDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/teams"
                    urlBuilder_.Append("api/teams");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TeamDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RegisterAccountAsync(ManagedUserVM body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/register"
                    urlBuilder_.Append("api/register");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PredictionDTO>> GetAllPredictionsAsync(long? id_greaterThan = null, long? id_lessThan = null, long? id_greaterThanOrEqual = null, long? id_lessThanOrEqual = null, long? id_equals = null, long? id_notEquals = null, bool? id_specified = null, System.Collections.Generic.IEnumerable<long>? id_in = null, System.Collections.Generic.IEnumerable<long>? id_notIn = null, int? homeTeamScore_greaterThan = null, int? homeTeamScore_lessThan = null, int? homeTeamScore_greaterThanOrEqual = null, int? homeTeamScore_lessThanOrEqual = null, int? homeTeamScore_equals = null, int? homeTeamScore_notEquals = null, bool? homeTeamScore_specified = null, System.Collections.Generic.IEnumerable<int>? homeTeamScore_in = null, System.Collections.Generic.IEnumerable<int>? homeTeamScore_notIn = null, int? awayTeamScore_greaterThan = null, int? awayTeamScore_lessThan = null, int? awayTeamScore_greaterThanOrEqual = null, int? awayTeamScore_lessThanOrEqual = null, int? awayTeamScore_equals = null, int? awayTeamScore_notEquals = null, bool? awayTeamScore_specified = null, System.Collections.Generic.IEnumerable<int>? awayTeamScore_in = null, System.Collections.Generic.IEnumerable<int>? awayTeamScore_notIn = null, int? points_greaterThan = null, int? points_lessThan = null, int? points_greaterThanOrEqual = null, int? points_lessThanOrEqual = null, int? points_equals = null, int? points_notEquals = null, bool? points_specified = null, System.Collections.Generic.IEnumerable<int>? points_in = null, System.Collections.Generic.IEnumerable<int>? points_notIn = null, long? matchId_greaterThan = null, long? matchId_lessThan = null, long? matchId_greaterThanOrEqual = null, long? matchId_lessThanOrEqual = null, long? matchId_equals = null, long? matchId_notEquals = null, bool? matchId_specified = null, System.Collections.Generic.IEnumerable<long>? matchId_in = null, System.Collections.Generic.IEnumerable<long>? matchId_notIn = null, long? pencaId_greaterThan = null, long? pencaId_lessThan = null, long? pencaId_greaterThanOrEqual = null, long? pencaId_lessThanOrEqual = null, long? pencaId_equals = null, long? pencaId_notEquals = null, bool? pencaId_specified = null, System.Collections.Generic.IEnumerable<long>? pencaId_in = null, System.Collections.Generic.IEnumerable<long>? pencaId_notIn = null, long? userId_greaterThan = null, long? userId_lessThan = null, long? userId_greaterThanOrEqual = null, long? userId_lessThanOrEqual = null, long? userId_equals = null, long? userId_notEquals = null, bool? userId_specified = null, System.Collections.Generic.IEnumerable<long>? userId_in = null, System.Collections.Generic.IEnumerable<long>? userId_notIn = null, bool? distinct = null, int? page = null, int? size = null, System.Collections.Generic.IEnumerable<string>? sort = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/predictions"
                    urlBuilder_.Append("api/predictions");
                    urlBuilder_.Append('?');
                    if (id_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_in != null)
                    {
                        foreach (var item_ in id_in) { urlBuilder_.Append(System.Uri.EscapeDataString("id.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (id_notIn != null)
                    {
                        foreach (var item_ in id_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("id.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (homeTeamScore_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_in != null)
                    {
                        foreach (var item_ in homeTeamScore_in) { urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (homeTeamScore_notIn != null)
                    {
                        foreach (var item_ in homeTeamScore_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (awayTeamScore_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_in != null)
                    {
                        foreach (var item_ in awayTeamScore_in) { urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (awayTeamScore_notIn != null)
                    {
                        foreach (var item_ in awayTeamScore_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (points_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_in != null)
                    {
                        foreach (var item_ in points_in) { urlBuilder_.Append(System.Uri.EscapeDataString("points.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (points_notIn != null)
                    {
                        foreach (var item_ in points_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("points.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (matchId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_in != null)
                    {
                        foreach (var item_ in matchId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("matchId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (matchId_notIn != null)
                    {
                        foreach (var item_ in matchId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("matchId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pencaId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_in != null)
                    {
                        foreach (var item_ in pencaId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pencaId_notIn != null)
                    {
                        foreach (var item_ in pencaId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (userId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_in != null)
                    {
                        foreach (var item_ in userId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("userId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (userId_notIn != null)
                    {
                        foreach (var item_ in userId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("userId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (distinct != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("distinct")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(distinct, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                        foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PredictionDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PredictionDTO> CreatePredictionAsync(PredictionDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/predictions"
                    urlBuilder_.Append("api/predictions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PredictionDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PencaDTO>> GetAllPencasAsync(long? id_greaterThan = null, long? id_lessThan = null, long? id_greaterThanOrEqual = null, long? id_lessThanOrEqual = null, long? id_equals = null, long? id_notEquals = null, bool? id_specified = null, System.Collections.Generic.IEnumerable<long>? id_in = null, System.Collections.Generic.IEnumerable<long>? id_notIn = null, string? name_contains = null, string? name_doesNotContain = null, string? name_equals = null, string? name_notEquals = null, bool? name_specified = null, System.Collections.Generic.IEnumerable<string>? name_in = null, System.Collections.Generic.IEnumerable<string>? name_notIn = null, System.DateTime? startDate_greaterThan = null, System.DateTime? startDate_lessThan = null, System.DateTime? startDate_greaterThanOrEqual = null, System.DateTime? startDate_lessThanOrEqual = null, System.DateTime? startDate_equals = null, System.DateTime? startDate_notEquals = null, bool? startDate_specified = null, System.Collections.Generic.IEnumerable<System.DateTime>? startDate_in = null, System.Collections.Generic.IEnumerable<System.DateTime>? startDate_notIn = null, System.DateTime? endDate_greaterThan = null, System.DateTime? endDate_lessThan = null, System.DateTime? endDate_greaterThanOrEqual = null, System.DateTime? endDate_lessThanOrEqual = null, System.DateTime? endDate_equals = null, System.DateTime? endDate_notEquals = null, bool? endDate_specified = null, System.Collections.Generic.IEnumerable<System.DateTime>? endDate_in = null, System.Collections.Generic.IEnumerable<System.DateTime>? endDate_notIn = null, long? tournamentId_greaterThan = null, long? tournamentId_lessThan = null, long? tournamentId_greaterThanOrEqual = null, long? tournamentId_lessThanOrEqual = null, long? tournamentId_equals = null, long? tournamentId_notEquals = null, bool? tournamentId_specified = null, System.Collections.Generic.IEnumerable<long>? tournamentId_in = null, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn = null, long? predictionId_greaterThan = null, long? predictionId_lessThan = null, long? predictionId_greaterThanOrEqual = null, long? predictionId_lessThanOrEqual = null, long? predictionId_equals = null, long? predictionId_notEquals = null, bool? predictionId_specified = null, System.Collections.Generic.IEnumerable<long>? predictionId_in = null, System.Collections.Generic.IEnumerable<long>? predictionId_notIn = null, bool? distinct = null, int? page = null, int? size = null, System.Collections.Generic.IEnumerable<string>? sort = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/pencas"
                    urlBuilder_.Append("api/pencas");
                    urlBuilder_.Append('?');
                    if (id_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_in != null)
                    {
                        foreach (var item_ in id_in) { urlBuilder_.Append(System.Uri.EscapeDataString("id.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (id_notIn != null)
                    {
                        foreach (var item_ in id_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("id.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (name_contains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.contains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_contains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_doesNotContain != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.doesNotContain")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_doesNotContain, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_in != null)
                    {
                        foreach (var item_ in name_in) { urlBuilder_.Append(System.Uri.EscapeDataString("name.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (name_notIn != null)
                    {
                        foreach (var item_ in name_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("name.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (startDate_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(startDate_greaterThan.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.lessThan")).Append('=').Append(System.Uri.EscapeDataString(startDate_lessThan.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(startDate_greaterThanOrEqual.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(startDate_lessThanOrEqual.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.equals")).Append('=').Append(System.Uri.EscapeDataString(startDate_equals.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.notEquals")).Append('=').Append(System.Uri.EscapeDataString(startDate_notEquals.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startDate_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_in != null)
                    {
                        foreach (var item_ in startDate_in) { urlBuilder_.Append(System.Uri.EscapeDataString("startDate.in")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (startDate_notIn != null)
                    {
                        foreach (var item_ in startDate_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("startDate.notIn")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (endDate_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(endDate_greaterThan.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.lessThan")).Append('=').Append(System.Uri.EscapeDataString(endDate_lessThan.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(endDate_greaterThanOrEqual.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(endDate_lessThanOrEqual.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.equals")).Append('=').Append(System.Uri.EscapeDataString(endDate_equals.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.notEquals")).Append('=').Append(System.Uri.EscapeDataString(endDate_notEquals.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(endDate_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_in != null)
                    {
                        foreach (var item_ in endDate_in) { urlBuilder_.Append(System.Uri.EscapeDataString("endDate.in")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (endDate_notIn != null)
                    {
                        foreach (var item_ in endDate_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("endDate.notIn")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_in != null)
                    {
                        foreach (var item_ in tournamentId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_notIn != null)
                    {
                        foreach (var item_ in tournamentId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (predictionId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_in != null)
                    {
                        foreach (var item_ in predictionId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (predictionId_notIn != null)
                    {
                        foreach (var item_ in predictionId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (distinct != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("distinct")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(distinct, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                        foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PencaDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PencaDTO> CreatePencaAsync(PencaDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/pencas"
                    urlBuilder_.Append("api/pencas");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PencaDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MatchDTO>> GetAllMatchesAsync(long? id_greaterThan = null, long? id_lessThan = null, long? id_greaterThanOrEqual = null, long? id_lessThanOrEqual = null, long? id_equals = null, long? id_notEquals = null, bool? id_specified = null, System.Collections.Generic.IEnumerable<long>? id_in = null, System.Collections.Generic.IEnumerable<long>? id_notIn = null, System.DateTime? date_greaterThan = null, System.DateTime? date_lessThan = null, System.DateTime? date_greaterThanOrEqual = null, System.DateTime? date_lessThanOrEqual = null, System.DateTime? date_equals = null, System.DateTime? date_notEquals = null, bool? date_specified = null, System.Collections.Generic.IEnumerable<System.DateTime>? date_in = null, System.Collections.Generic.IEnumerable<System.DateTime>? date_notIn = null, int? homeTeamScore_greaterThan = null, int? homeTeamScore_lessThan = null, int? homeTeamScore_greaterThanOrEqual = null, int? homeTeamScore_lessThanOrEqual = null, int? homeTeamScore_equals = null, int? homeTeamScore_notEquals = null, bool? homeTeamScore_specified = null, System.Collections.Generic.IEnumerable<int>? homeTeamScore_in = null, System.Collections.Generic.IEnumerable<int>? homeTeamScore_notIn = null, int? awayTeamScore_greaterThan = null, int? awayTeamScore_lessThan = null, int? awayTeamScore_greaterThanOrEqual = null, int? awayTeamScore_lessThanOrEqual = null, int? awayTeamScore_equals = null, int? awayTeamScore_notEquals = null, bool? awayTeamScore_specified = null, System.Collections.Generic.IEnumerable<int>? awayTeamScore_in = null, System.Collections.Generic.IEnumerable<int>? awayTeamScore_notIn = null, long? tournamentId_greaterThan = null, long? tournamentId_lessThan = null, long? tournamentId_greaterThanOrEqual = null, long? tournamentId_lessThanOrEqual = null, long? tournamentId_equals = null, long? tournamentId_notEquals = null, bool? tournamentId_specified = null, System.Collections.Generic.IEnumerable<long>? tournamentId_in = null, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn = null, long? homeTeamId_greaterThan = null, long? homeTeamId_lessThan = null, long? homeTeamId_greaterThanOrEqual = null, long? homeTeamId_lessThanOrEqual = null, long? homeTeamId_equals = null, long? homeTeamId_notEquals = null, bool? homeTeamId_specified = null, System.Collections.Generic.IEnumerable<long>? homeTeamId_in = null, System.Collections.Generic.IEnumerable<long>? homeTeamId_notIn = null, long? awayTeamId_greaterThan = null, long? awayTeamId_lessThan = null, long? awayTeamId_greaterThanOrEqual = null, long? awayTeamId_lessThanOrEqual = null, long? awayTeamId_equals = null, long? awayTeamId_notEquals = null, bool? awayTeamId_specified = null, System.Collections.Generic.IEnumerable<long>? awayTeamId_in = null, System.Collections.Generic.IEnumerable<long>? awayTeamId_notIn = null, long? predictionId_greaterThan = null, long? predictionId_lessThan = null, long? predictionId_greaterThanOrEqual = null, long? predictionId_lessThanOrEqual = null, long? predictionId_equals = null, long? predictionId_notEquals = null, bool? predictionId_specified = null, System.Collections.Generic.IEnumerable<long>? predictionId_in = null, System.Collections.Generic.IEnumerable<long>? predictionId_notIn = null, bool? distinct = null, int? page = null, int? size = null, System.Collections.Generic.IEnumerable<string>? sort = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/matches"
                    urlBuilder_.Append("api/matches");
                    urlBuilder_.Append('?');
                    if (id_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_in != null)
                    {
                        foreach (var item_ in id_in) { urlBuilder_.Append(System.Uri.EscapeDataString("id.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (id_notIn != null)
                    {
                        foreach (var item_ in id_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("id.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (date_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(date_greaterThan.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.lessThan")).Append('=').Append(System.Uri.EscapeDataString(date_lessThan.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(date_greaterThanOrEqual.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(date_lessThanOrEqual.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.equals")).Append('=').Append(System.Uri.EscapeDataString(date_equals.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.notEquals")).Append('=').Append(System.Uri.EscapeDataString(date_notEquals.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(date_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_in != null)
                    {
                        foreach (var item_ in date_in) { urlBuilder_.Append(System.Uri.EscapeDataString("date.in")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (date_notIn != null)
                    {
                        foreach (var item_ in date_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("date.notIn")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (homeTeamScore_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_in != null)
                    {
                        foreach (var item_ in homeTeamScore_in) { urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (homeTeamScore_notIn != null)
                    {
                        foreach (var item_ in homeTeamScore_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (awayTeamScore_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_in != null)
                    {
                        foreach (var item_ in awayTeamScore_in) { urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (awayTeamScore_notIn != null)
                    {
                        foreach (var item_ in awayTeamScore_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_in != null)
                    {
                        foreach (var item_ in tournamentId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_notIn != null)
                    {
                        foreach (var item_ in tournamentId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (homeTeamId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_in != null)
                    {
                        foreach (var item_ in homeTeamId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (homeTeamId_notIn != null)
                    {
                        foreach (var item_ in homeTeamId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (awayTeamId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_in != null)
                    {
                        foreach (var item_ in awayTeamId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (awayTeamId_notIn != null)
                    {
                        foreach (var item_ in awayTeamId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (predictionId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_in != null)
                    {
                        foreach (var item_ in predictionId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (predictionId_notIn != null)
                    {
                        foreach (var item_ in predictionId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (distinct != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("distinct")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(distinct, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                        foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MatchDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MatchDTO> CreateMatchAsync(MatchDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/matches"
                    urlBuilder_.Append("api/matches");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MatchDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Authority>> GetAllAuthoritiesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/authorities"
                    urlBuilder_.Append("api/authorities");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Authority>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Authority> CreateAuthorityAsync(Authority body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/authorities"
                    urlBuilder_.Append("api/authorities");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Authority>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> IsAuthenticatedAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/authenticate"
                    urlBuilder_.Append("api/authenticate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<JWTToken> AuthorizeAsync(LoginVM body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/authenticate"
                    urlBuilder_.Append("api/authenticate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JWTToken>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AppUserDTO>> GetAllAppUsersAsync(long? id_greaterThan = null, long? id_lessThan = null, long? id_greaterThanOrEqual = null, long? id_lessThanOrEqual = null, long? id_equals = null, long? id_notEquals = null, bool? id_specified = null, System.Collections.Generic.IEnumerable<long>? id_in = null, System.Collections.Generic.IEnumerable<long>? id_notIn = null, long? userId_greaterThan = null, long? userId_lessThan = null, long? userId_greaterThanOrEqual = null, long? userId_lessThanOrEqual = null, long? userId_equals = null, long? userId_notEquals = null, bool? userId_specified = null, System.Collections.Generic.IEnumerable<long>? userId_in = null, System.Collections.Generic.IEnumerable<long>? userId_notIn = null, long? tournamentId_greaterThan = null, long? tournamentId_lessThan = null, long? tournamentId_greaterThanOrEqual = null, long? tournamentId_lessThanOrEqual = null, long? tournamentId_equals = null, long? tournamentId_notEquals = null, bool? tournamentId_specified = null, System.Collections.Generic.IEnumerable<long>? tournamentId_in = null, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn = null, bool? distinct = null, int? page = null, int? size = null, System.Collections.Generic.IEnumerable<string>? sort = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/app-users"
                    urlBuilder_.Append("api/app-users");
                    urlBuilder_.Append('?');
                    if (id_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_in != null)
                    {
                        foreach (var item_ in id_in) { urlBuilder_.Append(System.Uri.EscapeDataString("id.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (id_notIn != null)
                    {
                        foreach (var item_ in id_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("id.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (userId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_in != null)
                    {
                        foreach (var item_ in userId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("userId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (userId_notIn != null)
                    {
                        foreach (var item_ in userId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("userId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_in != null)
                    {
                        foreach (var item_ in tournamentId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_notIn != null)
                    {
                        foreach (var item_ in tournamentId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (distinct != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("distinct")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(distinct, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                        foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AppUserDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AppUserDTO> CreateAppUserAsync(AppUserDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/app-users"
                    urlBuilder_.Append("api/app-users");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AppUserDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AdminUserDTO> GetAccountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/account"
                    urlBuilder_.Append("api/account");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdminUserDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task SaveAccountAsync(AdminUserDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/account"
                    urlBuilder_.Append("api/account");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RequestPasswordResetAsync(string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/account/reset-password/init"
                    urlBuilder_.Append("api/account/reset-password/init");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FinishPasswordResetAsync(KeyAndPasswordVM body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/account/reset-password/finish"
                    urlBuilder_.Append("api/account/reset-password/finish");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ChangePasswordAsync(PasswordChangeDTO body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/account/change-password"
                    urlBuilder_.Append("api/account/change-password");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Zero-based page index (0..N)</param>
        /// <param name="size">The size of the page to be returned</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserDTO>> GetAllPublicUsersAsync(int? page = null, int? size = null, System.Collections.Generic.IEnumerable<string>? sort = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/users"
                    urlBuilder_.Append("api/users");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                        foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<long> CountTournamentsAsync(long? id_greaterThan = null, long? id_lessThan = null, long? id_greaterThanOrEqual = null, long? id_lessThanOrEqual = null, long? id_equals = null, long? id_notEquals = null, bool? id_specified = null, System.Collections.Generic.IEnumerable<long>? id_in = null, System.Collections.Generic.IEnumerable<long>? id_notIn = null, string? name_contains = null, string? name_doesNotContain = null, string? name_equals = null, string? name_notEquals = null, bool? name_specified = null, System.Collections.Generic.IEnumerable<string>? name_in = null, System.Collections.Generic.IEnumerable<string>? name_notIn = null, System.DateTime? startDate_greaterThan = null, System.DateTime? startDate_lessThan = null, System.DateTime? startDate_greaterThanOrEqual = null, System.DateTime? startDate_lessThanOrEqual = null, System.DateTime? startDate_equals = null, System.DateTime? startDate_notEquals = null, bool? startDate_specified = null, System.Collections.Generic.IEnumerable<System.DateTime>? startDate_in = null, System.Collections.Generic.IEnumerable<System.DateTime>? startDate_notIn = null, System.DateTime? endDate_greaterThan = null, System.DateTime? endDate_lessThan = null, System.DateTime? endDate_greaterThanOrEqual = null, System.DateTime? endDate_lessThanOrEqual = null, System.DateTime? endDate_equals = null, System.DateTime? endDate_notEquals = null, bool? endDate_specified = null, System.Collections.Generic.IEnumerable<System.DateTime>? endDate_in = null, System.Collections.Generic.IEnumerable<System.DateTime>? endDate_notIn = null, long? teamId_greaterThan = null, long? teamId_lessThan = null, long? teamId_greaterThanOrEqual = null, long? teamId_lessThanOrEqual = null, long? teamId_equals = null, long? teamId_notEquals = null, bool? teamId_specified = null, System.Collections.Generic.IEnumerable<long>? teamId_in = null, System.Collections.Generic.IEnumerable<long>? teamId_notIn = null, long? pencaId_greaterThan = null, long? pencaId_lessThan = null, long? pencaId_greaterThanOrEqual = null, long? pencaId_lessThanOrEqual = null, long? pencaId_equals = null, long? pencaId_notEquals = null, bool? pencaId_specified = null, System.Collections.Generic.IEnumerable<long>? pencaId_in = null, System.Collections.Generic.IEnumerable<long>? pencaId_notIn = null, long? matchId_greaterThan = null, long? matchId_lessThan = null, long? matchId_greaterThanOrEqual = null, long? matchId_lessThanOrEqual = null, long? matchId_equals = null, long? matchId_notEquals = null, bool? matchId_specified = null, System.Collections.Generic.IEnumerable<long>? matchId_in = null, System.Collections.Generic.IEnumerable<long>? matchId_notIn = null, long? appUserId_greaterThan = null, long? appUserId_lessThan = null, long? appUserId_greaterThanOrEqual = null, long? appUserId_lessThanOrEqual = null, long? appUserId_equals = null, long? appUserId_notEquals = null, bool? appUserId_specified = null, System.Collections.Generic.IEnumerable<long>? appUserId_in = null, System.Collections.Generic.IEnumerable<long>? appUserId_notIn = null, bool? distinct = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/tournaments/count"
                    urlBuilder_.Append("api/tournaments/count");
                    urlBuilder_.Append('?');
                    if (id_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_in != null)
                    {
                        foreach (var item_ in id_in) { urlBuilder_.Append(System.Uri.EscapeDataString("id.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (id_notIn != null)
                    {
                        foreach (var item_ in id_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("id.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (name_contains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.contains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_contains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_doesNotContain != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.doesNotContain")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_doesNotContain, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_in != null)
                    {
                        foreach (var item_ in name_in) { urlBuilder_.Append(System.Uri.EscapeDataString("name.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (name_notIn != null)
                    {
                        foreach (var item_ in name_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("name.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (startDate_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(startDate_greaterThan.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.lessThan")).Append('=').Append(System.Uri.EscapeDataString(startDate_lessThan.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(startDate_greaterThanOrEqual.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(startDate_lessThanOrEqual.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.equals")).Append('=').Append(System.Uri.EscapeDataString(startDate_equals.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.notEquals")).Append('=').Append(System.Uri.EscapeDataString(startDate_notEquals.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startDate_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_in != null)
                    {
                        foreach (var item_ in startDate_in) { urlBuilder_.Append(System.Uri.EscapeDataString("startDate.in")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (startDate_notIn != null)
                    {
                        foreach (var item_ in startDate_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("startDate.notIn")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (endDate_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(endDate_greaterThan.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.lessThan")).Append('=').Append(System.Uri.EscapeDataString(endDate_lessThan.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(endDate_greaterThanOrEqual.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(endDate_lessThanOrEqual.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.equals")).Append('=').Append(System.Uri.EscapeDataString(endDate_equals.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.notEquals")).Append('=').Append(System.Uri.EscapeDataString(endDate_notEquals.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(endDate_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_in != null)
                    {
                        foreach (var item_ in endDate_in) { urlBuilder_.Append(System.Uri.EscapeDataString("endDate.in")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (endDate_notIn != null)
                    {
                        foreach (var item_ in endDate_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("endDate.notIn")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (teamId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("teamId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(teamId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (teamId_in != null)
                    {
                        foreach (var item_ in teamId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("teamId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (teamId_notIn != null)
                    {
                        foreach (var item_ in teamId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("teamId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pencaId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_in != null)
                    {
                        foreach (var item_ in pencaId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pencaId_notIn != null)
                    {
                        foreach (var item_ in pencaId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (matchId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_in != null)
                    {
                        foreach (var item_ in matchId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("matchId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (matchId_notIn != null)
                    {
                        foreach (var item_ in matchId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("matchId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (appUserId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appUserId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appUserId_in != null)
                    {
                        foreach (var item_ in appUserId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (appUserId_notIn != null)
                    {
                        foreach (var item_ in appUserId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("appUserId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (distinct != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("distinct")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(distinct, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<long>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<long> CountTeamsAsync(long? id_greaterThan = null, long? id_lessThan = null, long? id_greaterThanOrEqual = null, long? id_lessThanOrEqual = null, long? id_equals = null, long? id_notEquals = null, bool? id_specified = null, System.Collections.Generic.IEnumerable<long>? id_in = null, System.Collections.Generic.IEnumerable<long>? id_notIn = null, string? name_contains = null, string? name_doesNotContain = null, string? name_equals = null, string? name_notEquals = null, bool? name_specified = null, System.Collections.Generic.IEnumerable<string>? name_in = null, System.Collections.Generic.IEnumerable<string>? name_notIn = null, long? tournamentId_greaterThan = null, long? tournamentId_lessThan = null, long? tournamentId_greaterThanOrEqual = null, long? tournamentId_lessThanOrEqual = null, long? tournamentId_equals = null, long? tournamentId_notEquals = null, bool? tournamentId_specified = null, System.Collections.Generic.IEnumerable<long>? tournamentId_in = null, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn = null, bool? distinct = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/teams/count"
                    urlBuilder_.Append("api/teams/count");
                    urlBuilder_.Append('?');
                    if (id_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_in != null)
                    {
                        foreach (var item_ in id_in) { urlBuilder_.Append(System.Uri.EscapeDataString("id.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (id_notIn != null)
                    {
                        foreach (var item_ in id_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("id.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (name_contains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.contains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_contains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_doesNotContain != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.doesNotContain")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_doesNotContain, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_in != null)
                    {
                        foreach (var item_ in name_in) { urlBuilder_.Append(System.Uri.EscapeDataString("name.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (name_notIn != null)
                    {
                        foreach (var item_ in name_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("name.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_in != null)
                    {
                        foreach (var item_ in tournamentId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_notIn != null)
                    {
                        foreach (var item_ in tournamentId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (distinct != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("distinct")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(distinct, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<long>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<long> CountPredictionsAsync(long? id_greaterThan = null, long? id_lessThan = null, long? id_greaterThanOrEqual = null, long? id_lessThanOrEqual = null, long? id_equals = null, long? id_notEquals = null, bool? id_specified = null, System.Collections.Generic.IEnumerable<long>? id_in = null, System.Collections.Generic.IEnumerable<long>? id_notIn = null, int? homeTeamScore_greaterThan = null, int? homeTeamScore_lessThan = null, int? homeTeamScore_greaterThanOrEqual = null, int? homeTeamScore_lessThanOrEqual = null, int? homeTeamScore_equals = null, int? homeTeamScore_notEquals = null, bool? homeTeamScore_specified = null, System.Collections.Generic.IEnumerable<int>? homeTeamScore_in = null, System.Collections.Generic.IEnumerable<int>? homeTeamScore_notIn = null, int? awayTeamScore_greaterThan = null, int? awayTeamScore_lessThan = null, int? awayTeamScore_greaterThanOrEqual = null, int? awayTeamScore_lessThanOrEqual = null, int? awayTeamScore_equals = null, int? awayTeamScore_notEquals = null, bool? awayTeamScore_specified = null, System.Collections.Generic.IEnumerable<int>? awayTeamScore_in = null, System.Collections.Generic.IEnumerable<int>? awayTeamScore_notIn = null, int? points_greaterThan = null, int? points_lessThan = null, int? points_greaterThanOrEqual = null, int? points_lessThanOrEqual = null, int? points_equals = null, int? points_notEquals = null, bool? points_specified = null, System.Collections.Generic.IEnumerable<int>? points_in = null, System.Collections.Generic.IEnumerable<int>? points_notIn = null, long? matchId_greaterThan = null, long? matchId_lessThan = null, long? matchId_greaterThanOrEqual = null, long? matchId_lessThanOrEqual = null, long? matchId_equals = null, long? matchId_notEquals = null, bool? matchId_specified = null, System.Collections.Generic.IEnumerable<long>? matchId_in = null, System.Collections.Generic.IEnumerable<long>? matchId_notIn = null, long? pencaId_greaterThan = null, long? pencaId_lessThan = null, long? pencaId_greaterThanOrEqual = null, long? pencaId_lessThanOrEqual = null, long? pencaId_equals = null, long? pencaId_notEquals = null, bool? pencaId_specified = null, System.Collections.Generic.IEnumerable<long>? pencaId_in = null, System.Collections.Generic.IEnumerable<long>? pencaId_notIn = null, long? userId_greaterThan = null, long? userId_lessThan = null, long? userId_greaterThanOrEqual = null, long? userId_lessThanOrEqual = null, long? userId_equals = null, long? userId_notEquals = null, bool? userId_specified = null, System.Collections.Generic.IEnumerable<long>? userId_in = null, System.Collections.Generic.IEnumerable<long>? userId_notIn = null, bool? distinct = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/predictions/count"
                    urlBuilder_.Append("api/predictions/count");
                    urlBuilder_.Append('?');
                    if (id_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_in != null)
                    {
                        foreach (var item_ in id_in) { urlBuilder_.Append(System.Uri.EscapeDataString("id.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (id_notIn != null)
                    {
                        foreach (var item_ in id_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("id.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (homeTeamScore_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_in != null)
                    {
                        foreach (var item_ in homeTeamScore_in) { urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (homeTeamScore_notIn != null)
                    {
                        foreach (var item_ in homeTeamScore_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (awayTeamScore_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_in != null)
                    {
                        foreach (var item_ in awayTeamScore_in) { urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (awayTeamScore_notIn != null)
                    {
                        foreach (var item_ in awayTeamScore_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (points_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("points.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(points_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (points_in != null)
                    {
                        foreach (var item_ in points_in) { urlBuilder_.Append(System.Uri.EscapeDataString("points.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (points_notIn != null)
                    {
                        foreach (var item_ in points_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("points.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (matchId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("matchId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(matchId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (matchId_in != null)
                    {
                        foreach (var item_ in matchId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("matchId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (matchId_notIn != null)
                    {
                        foreach (var item_ in matchId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("matchId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pencaId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pencaId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pencaId_in != null)
                    {
                        foreach (var item_ in pencaId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (pencaId_notIn != null)
                    {
                        foreach (var item_ in pencaId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("pencaId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (userId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_in != null)
                    {
                        foreach (var item_ in userId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("userId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (userId_notIn != null)
                    {
                        foreach (var item_ in userId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("userId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (distinct != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("distinct")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(distinct, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<long>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<long> CountPencasAsync(long? id_greaterThan = null, long? id_lessThan = null, long? id_greaterThanOrEqual = null, long? id_lessThanOrEqual = null, long? id_equals = null, long? id_notEquals = null, bool? id_specified = null, System.Collections.Generic.IEnumerable<long>? id_in = null, System.Collections.Generic.IEnumerable<long>? id_notIn = null, string? name_contains = null, string? name_doesNotContain = null, string? name_equals = null, string? name_notEquals = null, bool? name_specified = null, System.Collections.Generic.IEnumerable<string>? name_in = null, System.Collections.Generic.IEnumerable<string>? name_notIn = null, System.DateTime? startDate_greaterThan = null, System.DateTime? startDate_lessThan = null, System.DateTime? startDate_greaterThanOrEqual = null, System.DateTime? startDate_lessThanOrEqual = null, System.DateTime? startDate_equals = null, System.DateTime? startDate_notEquals = null, bool? startDate_specified = null, System.Collections.Generic.IEnumerable<System.DateTime>? startDate_in = null, System.Collections.Generic.IEnumerable<System.DateTime>? startDate_notIn = null, System.DateTime? endDate_greaterThan = null, System.DateTime? endDate_lessThan = null, System.DateTime? endDate_greaterThanOrEqual = null, System.DateTime? endDate_lessThanOrEqual = null, System.DateTime? endDate_equals = null, System.DateTime? endDate_notEquals = null, bool? endDate_specified = null, System.Collections.Generic.IEnumerable<System.DateTime>? endDate_in = null, System.Collections.Generic.IEnumerable<System.DateTime>? endDate_notIn = null, long? tournamentId_greaterThan = null, long? tournamentId_lessThan = null, long? tournamentId_greaterThanOrEqual = null, long? tournamentId_lessThanOrEqual = null, long? tournamentId_equals = null, long? tournamentId_notEquals = null, bool? tournamentId_specified = null, System.Collections.Generic.IEnumerable<long>? tournamentId_in = null, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn = null, long? predictionId_greaterThan = null, long? predictionId_lessThan = null, long? predictionId_greaterThanOrEqual = null, long? predictionId_lessThanOrEqual = null, long? predictionId_equals = null, long? predictionId_notEquals = null, bool? predictionId_specified = null, System.Collections.Generic.IEnumerable<long>? predictionId_in = null, System.Collections.Generic.IEnumerable<long>? predictionId_notIn = null, bool? distinct = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/pencas/count"
                    urlBuilder_.Append("api/pencas/count");
                    urlBuilder_.Append('?');
                    if (id_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_in != null)
                    {
                        foreach (var item_ in id_in) { urlBuilder_.Append(System.Uri.EscapeDataString("id.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (id_notIn != null)
                    {
                        foreach (var item_ in id_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("id.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (name_contains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.contains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_contains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_doesNotContain != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.doesNotContain")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_doesNotContain, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name_in != null)
                    {
                        foreach (var item_ in name_in) { urlBuilder_.Append(System.Uri.EscapeDataString("name.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (name_notIn != null)
                    {
                        foreach (var item_ in name_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("name.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (startDate_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(startDate_greaterThan.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.lessThan")).Append('=').Append(System.Uri.EscapeDataString(startDate_lessThan.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(startDate_greaterThanOrEqual.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(startDate_lessThanOrEqual.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.equals")).Append('=').Append(System.Uri.EscapeDataString(startDate_equals.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.notEquals")).Append('=').Append(System.Uri.EscapeDataString(startDate_notEquals.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startDate_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (startDate_in != null)
                    {
                        foreach (var item_ in startDate_in) { urlBuilder_.Append(System.Uri.EscapeDataString("startDate.in")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (startDate_notIn != null)
                    {
                        foreach (var item_ in startDate_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("startDate.notIn")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (endDate_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(endDate_greaterThan.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.lessThan")).Append('=').Append(System.Uri.EscapeDataString(endDate_lessThan.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(endDate_greaterThanOrEqual.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(endDate_lessThanOrEqual.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.equals")).Append('=').Append(System.Uri.EscapeDataString(endDate_equals.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.notEquals")).Append('=').Append(System.Uri.EscapeDataString(endDate_notEquals.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(endDate_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate_in != null)
                    {
                        foreach (var item_ in endDate_in) { urlBuilder_.Append(System.Uri.EscapeDataString("endDate.in")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (endDate_notIn != null)
                    {
                        foreach (var item_ in endDate_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("endDate.notIn")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_in != null)
                    {
                        foreach (var item_ in tournamentId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_notIn != null)
                    {
                        foreach (var item_ in tournamentId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (predictionId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_in != null)
                    {
                        foreach (var item_ in predictionId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (predictionId_notIn != null)
                    {
                        foreach (var item_ in predictionId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (distinct != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("distinct")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(distinct, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<long>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<long> CountMatchesAsync(long? id_greaterThan = null, long? id_lessThan = null, long? id_greaterThanOrEqual = null, long? id_lessThanOrEqual = null, long? id_equals = null, long? id_notEquals = null, bool? id_specified = null, System.Collections.Generic.IEnumerable<long>? id_in = null, System.Collections.Generic.IEnumerable<long>? id_notIn = null, System.DateTime? date_greaterThan = null, System.DateTime? date_lessThan = null, System.DateTime? date_greaterThanOrEqual = null, System.DateTime? date_lessThanOrEqual = null, System.DateTime? date_equals = null, System.DateTime? date_notEquals = null, bool? date_specified = null, System.Collections.Generic.IEnumerable<System.DateTime>? date_in = null, System.Collections.Generic.IEnumerable<System.DateTime>? date_notIn = null, int? homeTeamScore_greaterThan = null, int? homeTeamScore_lessThan = null, int? homeTeamScore_greaterThanOrEqual = null, int? homeTeamScore_lessThanOrEqual = null, int? homeTeamScore_equals = null, int? homeTeamScore_notEquals = null, bool? homeTeamScore_specified = null, System.Collections.Generic.IEnumerable<int>? homeTeamScore_in = null, System.Collections.Generic.IEnumerable<int>? homeTeamScore_notIn = null, int? awayTeamScore_greaterThan = null, int? awayTeamScore_lessThan = null, int? awayTeamScore_greaterThanOrEqual = null, int? awayTeamScore_lessThanOrEqual = null, int? awayTeamScore_equals = null, int? awayTeamScore_notEquals = null, bool? awayTeamScore_specified = null, System.Collections.Generic.IEnumerable<int>? awayTeamScore_in = null, System.Collections.Generic.IEnumerable<int>? awayTeamScore_notIn = null, long? tournamentId_greaterThan = null, long? tournamentId_lessThan = null, long? tournamentId_greaterThanOrEqual = null, long? tournamentId_lessThanOrEqual = null, long? tournamentId_equals = null, long? tournamentId_notEquals = null, bool? tournamentId_specified = null, System.Collections.Generic.IEnumerable<long>? tournamentId_in = null, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn = null, long? homeTeamId_greaterThan = null, long? homeTeamId_lessThan = null, long? homeTeamId_greaterThanOrEqual = null, long? homeTeamId_lessThanOrEqual = null, long? homeTeamId_equals = null, long? homeTeamId_notEquals = null, bool? homeTeamId_specified = null, System.Collections.Generic.IEnumerable<long>? homeTeamId_in = null, System.Collections.Generic.IEnumerable<long>? homeTeamId_notIn = null, long? awayTeamId_greaterThan = null, long? awayTeamId_lessThan = null, long? awayTeamId_greaterThanOrEqual = null, long? awayTeamId_lessThanOrEqual = null, long? awayTeamId_equals = null, long? awayTeamId_notEquals = null, bool? awayTeamId_specified = null, System.Collections.Generic.IEnumerable<long>? awayTeamId_in = null, System.Collections.Generic.IEnumerable<long>? awayTeamId_notIn = null, long? predictionId_greaterThan = null, long? predictionId_lessThan = null, long? predictionId_greaterThanOrEqual = null, long? predictionId_lessThanOrEqual = null, long? predictionId_equals = null, long? predictionId_notEquals = null, bool? predictionId_specified = null, System.Collections.Generic.IEnumerable<long>? predictionId_in = null, System.Collections.Generic.IEnumerable<long>? predictionId_notIn = null, bool? distinct = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/matches/count"
                    urlBuilder_.Append("api/matches/count");
                    urlBuilder_.Append('?');
                    if (id_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_in != null)
                    {
                        foreach (var item_ in id_in) { urlBuilder_.Append(System.Uri.EscapeDataString("id.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (id_notIn != null)
                    {
                        foreach (var item_ in id_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("id.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (date_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(date_greaterThan.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.lessThan")).Append('=').Append(System.Uri.EscapeDataString(date_lessThan.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(date_greaterThanOrEqual.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(date_lessThanOrEqual.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.equals")).Append('=').Append(System.Uri.EscapeDataString(date_equals.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.notEquals")).Append('=').Append(System.Uri.EscapeDataString(date_notEquals.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(date_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date_in != null)
                    {
                        foreach (var item_ in date_in) { urlBuilder_.Append(System.Uri.EscapeDataString("date.in")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (date_notIn != null)
                    {
                        foreach (var item_ in date_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("date.notIn")).Append('=').Append(System.Uri.EscapeDataString(item_.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (homeTeamScore_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamScore_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamScore_in != null)
                    {
                        foreach (var item_ in homeTeamScore_in) { urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (homeTeamScore_notIn != null)
                    {
                        foreach (var item_ in homeTeamScore_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamScore.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (awayTeamScore_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamScore_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamScore_in != null)
                    {
                        foreach (var item_ in awayTeamScore_in) { urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (awayTeamScore_notIn != null)
                    {
                        foreach (var item_ in awayTeamScore_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamScore.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_in != null)
                    {
                        foreach (var item_ in tournamentId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_notIn != null)
                    {
                        foreach (var item_ in tournamentId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (homeTeamId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(homeTeamId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (homeTeamId_in != null)
                    {
                        foreach (var item_ in homeTeamId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (homeTeamId_notIn != null)
                    {
                        foreach (var item_ in homeTeamId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("homeTeamId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (awayTeamId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(awayTeamId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (awayTeamId_in != null)
                    {
                        foreach (var item_ in awayTeamId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (awayTeamId_notIn != null)
                    {
                        foreach (var item_ in awayTeamId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("awayTeamId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (predictionId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(predictionId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (predictionId_in != null)
                    {
                        foreach (var item_ in predictionId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (predictionId_notIn != null)
                    {
                        foreach (var item_ in predictionId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("predictionId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (distinct != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("distinct")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(distinct, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<long>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Authority> GetAuthorityAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/authorities/{id}"
                    urlBuilder_.Append("api/authorities/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Authority>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteAuthorityAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/authorities/{id}"
                    urlBuilder_.Append("api/authorities/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<long> CountAppUsersAsync(long? id_greaterThan = null, long? id_lessThan = null, long? id_greaterThanOrEqual = null, long? id_lessThanOrEqual = null, long? id_equals = null, long? id_notEquals = null, bool? id_specified = null, System.Collections.Generic.IEnumerable<long>? id_in = null, System.Collections.Generic.IEnumerable<long>? id_notIn = null, long? userId_greaterThan = null, long? userId_lessThan = null, long? userId_greaterThanOrEqual = null, long? userId_lessThanOrEqual = null, long? userId_equals = null, long? userId_notEquals = null, bool? userId_specified = null, System.Collections.Generic.IEnumerable<long>? userId_in = null, System.Collections.Generic.IEnumerable<long>? userId_notIn = null, long? tournamentId_greaterThan = null, long? tournamentId_lessThan = null, long? tournamentId_greaterThanOrEqual = null, long? tournamentId_lessThanOrEqual = null, long? tournamentId_equals = null, long? tournamentId_notEquals = null, bool? tournamentId_specified = null, System.Collections.Generic.IEnumerable<long>? tournamentId_in = null, System.Collections.Generic.IEnumerable<long>? tournamentId_notIn = null, bool? distinct = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/app-users/count"
                    urlBuilder_.Append("api/app-users/count");
                    urlBuilder_.Append('?');
                    if (id_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id_in != null)
                    {
                        foreach (var item_ in id_in) { urlBuilder_.Append(System.Uri.EscapeDataString("id.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (id_notIn != null)
                    {
                        foreach (var item_ in id_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("id.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (userId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId_in != null)
                    {
                        foreach (var item_ in userId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("userId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (userId_notIn != null)
                    {
                        foreach (var item_ in userId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("userId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_greaterThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_greaterThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.greaterThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_greaterThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_lessThanOrEqual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.lessThanOrEqual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_lessThanOrEqual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_equals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.equals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_equals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_notEquals != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notEquals")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_notEquals, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_specified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.specified")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tournamentId_specified, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tournamentId_in != null)
                    {
                        foreach (var item_ in tournamentId_in) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tournamentId_notIn != null)
                    {
                        foreach (var item_ in tournamentId_notIn) { urlBuilder_.Append(System.Uri.EscapeDataString("tournamentId.notIn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (distinct != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("distinct")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(distinct, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<long>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ActivateAccountAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (key == null)
                throw new System.ArgumentNullException("key");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/activate"
                    urlBuilder_.Append("api/activate");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("key")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AppUserDTO : Prism.Mvvm.BindableBase
    {
        private long? _id = default!;
        private UserDTO? _user = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id
        {
            get { return _id; }

            set { SetProperty(ref _id, value); }
        }

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDTO? User
        {
            get { return _user; }

            set { SetProperty(ref _user, value); }
        }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static AppUserDTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AppUserDTO>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TeamDTO : Prism.Mvvm.BindableBase
    {
        private long? _id = default!;
        private string _name = default!;
        private System.Collections.Generic.ICollection<TournamentDTO>? _tournaments = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id
        {
            get { return _id; }

            set { SetProperty(ref _id, value); }
        }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name
        {
            get { return _name; }

            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("tournaments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TournamentDTO>? Tournaments
        {
            get { return _tournaments; }

            set { SetProperty(ref _tournaments, value); }
        }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static TeamDTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeamDTO>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TournamentDTO : Prism.Mvvm.BindableBase
    {
        private long? _id = default!;
        private string _name = default!;
        private System.DateTime? _startDate = default!;
        private System.DateTime? _endDate = default!;
        private System.Collections.Generic.ICollection<TeamDTO>? _teams = default!;
        private System.Collections.Generic.ICollection<AppUserDTO>? _appUsers = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id
        {
            get { return _id; }

            set { SetProperty(ref _id, value); }
        }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name
        {
            get { return _name; }

            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime? StartDate
        {
            get { return _startDate; }

            set { SetProperty(ref _startDate, value); }
        }

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime? EndDate
        {
            get { return _endDate; }

            set { SetProperty(ref _endDate, value); }
        }

        [Newtonsoft.Json.JsonProperty("teams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TeamDTO>? Teams
        {
            get { return _teams; }

            set { SetProperty(ref _teams, value); }
        }

        [Newtonsoft.Json.JsonProperty("appUsers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AppUserDTO>? AppUsers
        {
            get { return _appUsers; }

            set { SetProperty(ref _appUsers, value); }
        }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static TournamentDTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TournamentDTO>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserDTO : Prism.Mvvm.BindableBase
    {
        private long? _id = default!;
        private string? _login = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id
        {
            get { return _id; }

            set { SetProperty(ref _id, value); }
        }

        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Login
        {
            get { return _login; }

            set { SetProperty(ref _login, value); }
        }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static UserDTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserDTO>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MatchDTO : Prism.Mvvm.BindableBase
    {
        private long? _id = default!;
        private System.DateTime _date = default!;
        private int _homeTeamScore = default!;
        private int _awayTeamScore = default!;
        private TournamentDTO? _tournament = default!;
        private TeamDTO? _homeTeam = default!;
        private TeamDTO? _awayTeam = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id
        {
            get { return _id; }

            set { SetProperty(ref _id, value); }
        }

        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime Date
        {
            get { return _date; }

            set { SetProperty(ref _date, value); }
        }

        [Newtonsoft.Json.JsonProperty("homeTeamScore", Required = Newtonsoft.Json.Required.Always)]
        public int HomeTeamScore
        {
            get { return _homeTeamScore; }

            set { SetProperty(ref _homeTeamScore, value); }
        }

        [Newtonsoft.Json.JsonProperty("awayTeamScore", Required = Newtonsoft.Json.Required.Always)]
        public int AwayTeamScore
        {
            get { return _awayTeamScore; }

            set { SetProperty(ref _awayTeamScore, value); }
        }

        [Newtonsoft.Json.JsonProperty("tournament", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TournamentDTO? Tournament
        {
            get { return _tournament; }

            set { SetProperty(ref _tournament, value); }
        }

        [Newtonsoft.Json.JsonProperty("homeTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TeamDTO? HomeTeam
        {
            get { return _homeTeam; }

            set { SetProperty(ref _homeTeam, value); }
        }

        [Newtonsoft.Json.JsonProperty("awayTeam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TeamDTO? AwayTeam
        {
            get { return _awayTeam; }

            set { SetProperty(ref _awayTeam, value); }
        }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static MatchDTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MatchDTO>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PencaDTO : Prism.Mvvm.BindableBase
    {
        private long? _id = default!;
        private string _name = default!;
        private System.DateTime _startDate = default!;
        private System.DateTime _endDate = default!;
        private TournamentDTO? _tournament = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id
        {
            get { return _id; }

            set { SetProperty(ref _id, value); }
        }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name
        {
            get { return _name; }

            set { SetProperty(ref _name, value); }
        }

        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime StartDate
        {
            get { return _startDate; }

            set { SetProperty(ref _startDate, value); }
        }

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime EndDate
        {
            get { return _endDate; }

            set { SetProperty(ref _endDate, value); }
        }

        [Newtonsoft.Json.JsonProperty("tournament", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TournamentDTO? Tournament
        {
            get { return _tournament; }

            set { SetProperty(ref _tournament, value); }
        }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static PencaDTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PencaDTO>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PredictionDTO : Prism.Mvvm.BindableBase
    {
        private long? _id = default!;
        private int _homeTeamScore = default!;
        private int _awayTeamScore = default!;
        private int? _points = default!;
        private MatchDTO? _match = default!;
        private PencaDTO? _penca = default!;
        private UserDTO? _user = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id
        {
            get { return _id; }

            set { SetProperty(ref _id, value); }
        }

        [Newtonsoft.Json.JsonProperty("homeTeamScore", Required = Newtonsoft.Json.Required.Always)]
        public int HomeTeamScore
        {
            get { return _homeTeamScore; }

            set { SetProperty(ref _homeTeamScore, value); }
        }

        [Newtonsoft.Json.JsonProperty("awayTeamScore", Required = Newtonsoft.Json.Required.Always)]
        public int AwayTeamScore
        {
            get { return _awayTeamScore; }

            set { SetProperty(ref _awayTeamScore, value); }
        }

        [Newtonsoft.Json.JsonProperty("points", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Points
        {
            get { return _points; }

            set { SetProperty(ref _points, value); }
        }

        [Newtonsoft.Json.JsonProperty("match", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MatchDTO? Match
        {
            get { return _match; }

            set { SetProperty(ref _match, value); }
        }

        [Newtonsoft.Json.JsonProperty("penca", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PencaDTO? Penca
        {
            get { return _penca; }

            set { SetProperty(ref _penca, value); }
        }

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDTO? User
        {
            get { return _user; }

            set { SetProperty(ref _user, value); }
        }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static PredictionDTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PredictionDTO>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdminUserDTO : Prism.Mvvm.BindableBase
    {
        private long? _id = default!;
        private string _login = default!;
        private string? _firstName = default!;
        private string? _lastName = default!;
        private string? _email = default!;
        private string? _imageUrl = default!;
        private bool? _activated = default!;
        private string? _langKey = default!;
        private string? _createdBy = default!;
        private System.DateTime? _createdDate = default!;
        private string? _lastModifiedBy = default!;
        private System.DateTime? _lastModifiedDate = default!;
        private System.Collections.Generic.ICollection<string>? _authorities = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id
        {
            get { return _id; }

            set { SetProperty(ref _id, value); }
        }

        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?>[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*)|(?>[_.@A-Za-z0-9-]+)$")]
        public string Login
        {
            get { return _login; }

            set { SetProperty(ref _login, value); }
        }

        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? FirstName
        {
            get { return _firstName; }

            set { SetProperty(ref _firstName, value); }
        }

        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? LastName
        {
            get { return _lastName; }

            set { SetProperty(ref _lastName, value); }
        }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(254, MinimumLength = 5)]
        public string? Email
        {
            get { return _email; }

            set { SetProperty(ref _email, value); }
        }

        [Newtonsoft.Json.JsonProperty("imageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? ImageUrl
        {
            get { return _imageUrl; }

            set { SetProperty(ref _imageUrl, value); }
        }

        [Newtonsoft.Json.JsonProperty("activated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Activated
        {
            get { return _activated; }

            set { SetProperty(ref _activated, value); }
        }

        [Newtonsoft.Json.JsonProperty("langKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 2)]
        public string? LangKey
        {
            get { return _langKey; }

            set { SetProperty(ref _langKey, value); }
        }

        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CreatedBy
        {
            get { return _createdBy; }

            set { SetProperty(ref _createdBy, value); }
        }

        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreatedDate
        {
            get { return _createdDate; }

            set { SetProperty(ref _createdDate, value); }
        }

        [Newtonsoft.Json.JsonProperty("lastModifiedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastModifiedBy
        {
            get { return _lastModifiedBy; }

            set { SetProperty(ref _lastModifiedBy, value); }
        }

        [Newtonsoft.Json.JsonProperty("lastModifiedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastModifiedDate
        {
            get { return _lastModifiedDate; }

            set { SetProperty(ref _lastModifiedDate, value); }
        }

        [Newtonsoft.Json.JsonProperty("authorities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Authorities
        {
            get { return _authorities; }

            set { SetProperty(ref _authorities, value); }
        }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static AdminUserDTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AdminUserDTO>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ManagedUserVM : Prism.Mvvm.BindableBase
    {
        private long? _id = default!;
        private string _login = default!;
        private string? _firstName = default!;
        private string? _lastName = default!;
        private string? _email = default!;
        private string? _imageUrl = default!;
        private bool? _activated = default!;
        private string? _langKey = default!;
        private string? _createdBy = default!;
        private System.DateTime? _createdDate = default!;
        private string? _lastModifiedBy = default!;
        private System.DateTime? _lastModifiedDate = default!;
        private System.Collections.Generic.ICollection<string>? _authorities = default!;
        private string? _password = default!;

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id
        {
            get { return _id; }

            set { SetProperty(ref _id, value); }
        }

        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?>[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*)|(?>[_.@A-Za-z0-9-]+)$")]
        public string Login
        {
            get { return _login; }

            set { SetProperty(ref _login, value); }
        }

        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? FirstName
        {
            get { return _firstName; }

            set { SetProperty(ref _firstName, value); }
        }

        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? LastName
        {
            get { return _lastName; }

            set { SetProperty(ref _lastName, value); }
        }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(254, MinimumLength = 5)]
        public string? Email
        {
            get { return _email; }

            set { SetProperty(ref _email, value); }
        }

        [Newtonsoft.Json.JsonProperty("imageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? ImageUrl
        {
            get { return _imageUrl; }

            set { SetProperty(ref _imageUrl, value); }
        }

        [Newtonsoft.Json.JsonProperty("activated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Activated
        {
            get { return _activated; }

            set { SetProperty(ref _activated, value); }
        }

        [Newtonsoft.Json.JsonProperty("langKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 2)]
        public string? LangKey
        {
            get { return _langKey; }

            set { SetProperty(ref _langKey, value); }
        }

        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CreatedBy
        {
            get { return _createdBy; }

            set { SetProperty(ref _createdBy, value); }
        }

        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreatedDate
        {
            get { return _createdDate; }

            set { SetProperty(ref _createdDate, value); }
        }

        [Newtonsoft.Json.JsonProperty("lastModifiedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastModifiedBy
        {
            get { return _lastModifiedBy; }

            set { SetProperty(ref _lastModifiedBy, value); }
        }

        [Newtonsoft.Json.JsonProperty("lastModifiedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastModifiedDate
        {
            get { return _lastModifiedDate; }

            set { SetProperty(ref _lastModifiedDate, value); }
        }

        [Newtonsoft.Json.JsonProperty("authorities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Authorities
        {
            get { return _authorities; }

            set { SetProperty(ref _authorities, value); }
        }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 4)]
        public string? Password
        {
            get { return _password; }

            set { SetProperty(ref _password, value); }
        }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static ManagedUserVM FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ManagedUserVM>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Authority : Prism.Mvvm.BindableBase
    {
        private string _name = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Name
        {
            get { return _name; }

            set { SetProperty(ref _name, value); }
        }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static Authority FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Authority>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoginVM : Prism.Mvvm.BindableBase
    {
        private string _username = default!;
        private string _password = default!;
        private bool? _rememberMe = default!;

        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Username
        {
            get { return _username; }

            set { SetProperty(ref _username, value); }
        }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 4)]
        public string Password
        {
            get { return _password; }

            set { SetProperty(ref _password, value); }
        }

        [Newtonsoft.Json.JsonProperty("rememberMe", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RememberMe
        {
            get { return _rememberMe; }

            set { SetProperty(ref _rememberMe, value); }
        }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static LoginVM FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LoginVM>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JWTToken : Prism.Mvvm.BindableBase
    {
        private string? _id_token = default!;

        [Newtonsoft.Json.JsonProperty("id_token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id_token
        {
            get { return _id_token; }

            set { SetProperty(ref _id_token, value); }
        }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static JWTToken FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JWTToken>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class User : Prism.Mvvm.BindableBase
    {
        private string? _createdBy = default!;
        private System.DateTime? _createdDate = default!;
        private string? _lastModifiedBy = default!;
        private System.DateTime? _lastModifiedDate = default!;
        private long? _id = default!;
        private string _login = default!;
        private string? _firstName = default!;
        private string? _lastName = default!;
        private string? _email = default!;
        private bool _activated = default!;
        private string? _langKey = default!;
        private string? _imageUrl = default!;
        private System.DateTime? _resetDate = default!;

        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CreatedBy
        {
            get { return _createdBy; }

            set { SetProperty(ref _createdBy, value); }
        }

        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreatedDate
        {
            get { return _createdDate; }

            set { SetProperty(ref _createdDate, value); }
        }

        [Newtonsoft.Json.JsonProperty("lastModifiedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastModifiedBy
        {
            get { return _lastModifiedBy; }

            set { SetProperty(ref _lastModifiedBy, value); }
        }

        [Newtonsoft.Json.JsonProperty("lastModifiedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastModifiedDate
        {
            get { return _lastModifiedDate; }

            set { SetProperty(ref _lastModifiedDate, value); }
        }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id
        {
            get { return _id; }

            set { SetProperty(ref _id, value); }
        }

        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?>[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*)|(?>[_.@A-Za-z0-9-]+)$")]
        public string Login
        {
            get { return _login; }

            set { SetProperty(ref _login, value); }
        }

        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? FirstName
        {
            get { return _firstName; }

            set { SetProperty(ref _firstName, value); }
        }

        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? LastName
        {
            get { return _lastName; }

            set { SetProperty(ref _lastName, value); }
        }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(254, MinimumLength = 5)]
        public string? Email
        {
            get { return _email; }

            set { SetProperty(ref _email, value); }
        }

        [Newtonsoft.Json.JsonProperty("activated", Required = Newtonsoft.Json.Required.Always)]
        public bool Activated
        {
            get { return _activated; }

            set { SetProperty(ref _activated, value); }
        }

        [Newtonsoft.Json.JsonProperty("langKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 2)]
        public string? LangKey
        {
            get { return _langKey; }

            set { SetProperty(ref _langKey, value); }
        }

        [Newtonsoft.Json.JsonProperty("imageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? ImageUrl
        {
            get { return _imageUrl; }

            set { SetProperty(ref _imageUrl, value); }
        }

        [Newtonsoft.Json.JsonProperty("resetDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ResetDate
        {
            get { return _resetDate; }

            set { SetProperty(ref _resetDate, value); }
        }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static User FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<User>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeyAndPasswordVM : Prism.Mvvm.BindableBase
    {
        private string? _key = default!;
        private string? _newPassword = default!;

        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Key
        {
            get { return _key; }

            set { SetProperty(ref _key, value); }
        }

        [Newtonsoft.Json.JsonProperty("newPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NewPassword
        {
            get { return _newPassword; }

            set { SetProperty(ref _newPassword, value); }
        }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static KeyAndPasswordVM FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<KeyAndPasswordVM>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PasswordChangeDTO : Prism.Mvvm.BindableBase
    {
        private string? _currentPassword = default!;
        private string? _newPassword = default!;

        [Newtonsoft.Json.JsonProperty("currentPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CurrentPassword
        {
            get { return _currentPassword; }

            set { SetProperty(ref _currentPassword, value); }
        }

        [Newtonsoft.Json.JsonProperty("newPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NewPassword
        {
            get { return _newPassword; }

            set { SetProperty(ref _newPassword, value); }
        }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }
        public static PasswordChangeDTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PasswordChangeDTO>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });

        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625